{
  "api/Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.html",
    "title": "Class BoardPeripheralsService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class BoardPeripheralsService Provides methods to open communication links on the available buses such as SPI, I2C, and UART. Inheritance Object BoardPeripheralsService Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class BoardPeripheralsService Methods OpenI2cDevice(Byte) Opens an I2C device on Bus 1 (the default I2C Bus). Declaration public I2cDevice OpenI2cDevice(byte address) Parameters Type Name Description Byte address The address. Returns Type Description I2cDevice The I2C device. OpenI2cDevice(I2cBusId, Byte) Opens an I2C device on the given bus. Declaration public I2cDevice OpenI2cDevice(I2cBusId bus, byte address) Parameters Type Name Description I2cBusId bus The bus. Byte address The address. Returns Type Description I2cDevice The I2C device. OpenSoftI2cBus(GpioPin, GpioPin) Opens a software based I2C bus. Declaration public SoftI2cBus OpenSoftI2cBus(GpioPin dataPin, GpioPin clockPin) Parameters Type Name Description GpioPin dataPin The data pin. GpioPin clockPin The clock pin. Returns Type Description SoftI2cBus I2C Bus Accessor. OpenSoftI2cBus(GpioPin, GpioPin, Int32) Opens a software based I2C bus. Declaration public SoftI2cBus OpenSoftI2cBus(GpioPin dataPin, GpioPin clockPin, int baudRate) Parameters Type Name Description GpioPin dataPin The data pin. GpioPin clockPin The clock pin. Int32 baudRate The baud rate from 50 t 500,000 bits per second. Returns Type Description SoftI2cBus I2C Bus Accessor. OpenSoftSerialPort(GpioPin, GpioPin, UartRate) Opens a software (bit-banged) serial port. Declaration public SoftSerialPort OpenSoftSerialPort(GpioPin receivePin, GpioPin transmitPin, UartRate baudRate) Parameters Type Name Description GpioPin receivePin The receive pin. GpioPin transmitPin The transmit pin. UartRate baudRate The baud rate. Returns Type Description SoftSerialPort The software serial port. OpenSoftSerialPort(GpioPin, GpioPin, UartRate, Int32, Boolean) Opens a software (bit-banged) serial port. Declaration public SoftSerialPort OpenSoftSerialPort(GpioPin receivePin, GpioPin transmitPin, UartRate baudRate, int dataBits, bool invert) Parameters Type Name Description GpioPin receivePin The receive pin. GpioPin transmitPin The transmit pin. UartRate baudRate The baud rate. Int32 dataBits The data bits. Boolean invert if set to true [invert]. Returns Type Description SoftSerialPort The software serial port. OpenSoftSpiChannel(GpioPin, GpioPin, GpioPin, GpioPin) Opens a software based (bit-banged) SPI channel. Declaration public SoftSpiChannel OpenSoftSpiChannel(GpioPin csPin, GpioPin misoPin, GpioPin mosiPin, GpioPin clockPin) Parameters Type Name Description GpioPin csPin The cs pin. GpioPin misoPin The miso pin. GpioPin mosiPin The mosi pin. GpioPin clockPin The clock pin. Returns Type Description SoftSpiChannel The SPI channel. OpenSoftSpiChannel(GpioPin, GpioPin, GpioPin, GpioPin, Int32) Opens a software based (bit-banged) SPI channel. Declaration public SoftSpiChannel OpenSoftSpiChannel(GpioPin csPin, GpioPin misoPin, GpioPin mosiPin, GpioPin clockPin, int baudRate) Parameters Type Name Description GpioPin csPin The cs pin. GpioPin misoPin The miso pin. GpioPin mosiPin The mosi pin. GpioPin clockPin The clock pin. Int32 baudRate The baud rate. Returns Type Description SoftSpiChannel The SPI channel. OpenSoftSpiChannel(GpioPin, GpioPin, GpioPin, GpioPin, Int32, SoftSpiFlags) Opens a software based (bit-banged) SPI channel. Declaration public SoftSpiChannel OpenSoftSpiChannel(GpioPin csPin, GpioPin misoPin, GpioPin mosiPin, GpioPin clockPin, int baudRate, SoftSpiFlags flags) Parameters Type Name Description GpioPin csPin The cs pin. GpioPin misoPin The miso pin. GpioPin mosiPin The mosi pin. GpioPin clockPin The clock pin. Int32 baudRate The baud rate. SoftSpiFlags flags The flags. Returns Type Description SoftSpiChannel The SPI channel. OpenSpiChannel(SpiChannelId) Opens the given SPI channel using the default flags and a baud rate of 512k bits per second. Declaration public SpiChannel OpenSpiChannel(SpiChannelId channel) Parameters Type Name Description SpiChannelId channel The channel. Returns Type Description SpiChannel The peripheral service. OpenSpiChannel(SpiChannelId, Int32) Opens the given SPI channel using the default flags. Declaration public SpiChannel OpenSpiChannel(SpiChannelId channel, int baudRate) Parameters Type Name Description SpiChannelId channel The channel. Int32 baudRate The baud rate. Returns Type Description SpiChannel The peripheral service. OpenSpiChannel(SpiChannelId, Int32, SpiFlags) Opens the given SPI channel. Declaration public SpiChannel OpenSpiChannel(SpiChannelId channel, int baudRate, SpiFlags flags) Parameters Type Name Description SpiChannelId channel The channel. Int32 baudRate The baud rate. SpiFlags flags The flags. Returns Type Description SpiChannel The peripheral service. OpenUartPort(String, UartRate) Opens the specified UART port. Declaration public UartPort OpenUartPort(string portName, UartRate baudRate) Parameters Type Name Description String portName Name of the port. UartRate baudRate The baud rate. Returns Type Description UartPort The UART port object. ScanI2cBus() Scans the default I2C bus for devices. Declaration public byte[] ScanI2cBus() Returns Type Description Byte [] The found device addresses. ScanI2cBus(I2cBusId) Scans the I2C bus for devices. Declaration public byte[] ScanI2cBus(I2cBusId bus) Parameters Type Name Description I2cBusId bus The bus. Returns Type Description Byte [] A list of device addresses. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.BoardException.html": {
    "href": "api/Unosquare.PiGpio.BoardException.html",
    "title": "Class BoardException | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class BoardException Represents a PiGpio Library call exception. Inheritance Object Exception BoardException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Unosquare.PiGpio Syntax public class BoardException : Exception, ISerializable, _Exception Properties ResultCode Gets the result code. Declaration public ResultCode ResultCode { get; } Property Value Type Description ResultCode Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception See Also Exception Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.Board.html": {
    "href": "api/Unosquare.PiGpio.Board.html",
    "title": "Class Board | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Board Represents the Raspberry Pi Board and provides access to all GPIO initialization and functionality. Inheritance Object Board Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio Syntax public static class Board Properties BankA Provides access to GPIO bank 1 (or A) consisting of GPIO 0 to 31. Declaration public static GpioBank BankA { get; } Property Value Type Description GpioBank BankB Provides access to GPIO bank 2 (or B) consisting of GPIO 32 to 53. Declaration public static GpioBank BankB { get; } Property Value Type Description GpioBank BoardType Gets the type of the board. See the BoardType enumeration. Declaration public static BoardType BoardType { get; } Property Value Type Description BoardType GpioPads Provides access to the electrical pads. Declaration public static GpioPadCollection GpioPads { get; } Property Value Type Description GpioPadCollection HardwareRevision Gets the hardware revision number. Declaration public static long HardwareRevision { get; } Property Value Type Description Int64 IsAvailable Gets a value indicating whether the board has been initialized. Declaration public static bool IsAvailable { get; } Property Value Type Description Boolean LibraryVersion Gets the library version number. Declaration public static long LibraryVersion { get; } Property Value Type Description Int64 Peripherals Provides peripheral communication buses available to the board. Declaration public static BoardPeripheralsService Peripherals { get; } Property Value Type Description BoardPeripheralsService Pins Provides access to the pin collection. Declaration public static GpioPinCollection Pins { get; } Property Value Type Description GpioPinCollection Timing Provides timing and date functions. Declaration public static BoardTimingService Timing { get; } Property Value Type Description BoardTimingService Waves Provides a service to build and send waveforms with precisions of a few microseconds ~5us per pulse. Declaration public static BoardWaveService Waves { get; } Property Value Type Description BoardWaveService Methods Release() Releases board resources. Declaration public static void Release() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate.html",
    "title": "Delegate PiGpioAlertExDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioAlertExDelegate Defines a signature for alert callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike Interrupts, alerts are generated by continuously sampling the value of the pin. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioAlertExDelegate(UserGpio userGpio, LevelChange levelChange, uint timeMicrosecs, UIntPtr userData); Parameters Type Name Description UserGpio userGpio The user gpio. LevelChange levelChange The level change. UInt32 timeMicrosecs The time microsecs. UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.BscTransfer.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.BscTransfer.html",
    "title": "Class BscTransfer | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class BscTransfer A data structure representing a BSC transfer. Inheritance Object BscTransfer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public class BscTransfer Properties Control Write. Declaration public uint Control { get; set; } Property Value Type Description UInt32 ReceiveBuffer Read only. Declaration public byte[] ReceiveBuffer { get; set; } Property Value Type Description Byte [] ReceiveCount The rx count. Declaration public int ReceiveCount { get; set; } Property Value Type Description Int32 SendBuffer Write. Declaration public byte[] SendBuffer { get; set; } Property Value Type Description Byte [] SendCount Write. Declaration public int SendCount { get; set; } Property Value Type Description Int32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.html",
    "title": "Namespace Unosquare.PiGpio.NativeMethods | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Namespace Unosquare.PiGpio.NativeMethods Classes Custom Defines method calls for cutom functions. These calls are reserved but still provided for reference purposes. They are unused in the managed model of this library. Events Provides event notification warapper APIs for the pigpio library. These methods represent an internal event system that is unused in the managed model of this library. Files A file may only be opened if permission is granted by an entry in /opt/pigpio/access. This is intended to allow remote access to files in a more or less controlled manner. Each entry in /opt/pigpio/access takes the form of a file path which may contain wildcards followed by a single letter permission. The permission may be R for read, W for write, U for read/write, and N for no access. Where more than one entry matches a file the most specific rule applies. If no entry matches a file then access is denied. Suppose /opt/pigpio/access contains the following entries Files may be written in directory dir_1 with the exception of file.txt. Files may be read in directory dir_2. Files may be read and written in directory dir_3. If a directory allows read, write, or read/write access then files may be created in that directory. In an attempt to prevent risky permissions the following paths are ignored in /opt/pigpio/access. I2c Provides Methods for both, hardware based I2C and Bit-bang (Software) I2C bus communication. IO Defines fundamental IO methods for the GPIO Pins. The bulk of the managed pin functionality is supplied by these methods. Pwm Provides methods for software and hardware based PWM services for the GPIO pins. All User GPIO pins support PWM. RawWaves Raw waveform generation methods. These are advanced methods to send pulses on the pins with precise timing. It is recommended that the Waves methods are used instead. Scripts Provides access to scripting methods of the pigpio library. Scripts are used by the pigpio daemon to execute a set of instructions to speedup GPIO instructions. Unused in the managed model of this library but provided for reference purposes. Serial Exposes methods to read from a serial transmission using bit-banging (software-based UART). Writing requires the use of the GpioWaveAddSerial(UserGpio, UInt32, UInt32, UInt32, UInt32, UInt32, Byte[]) method. Setup Library setup and configuration methods. Spi Provides methods for SPI bus management. Threads PRovides threading and delay operations. Uart Provides access to hardware based UART (Serial Port). Utilities Provides various utility methods to retrieve hardware and software versions, time, shell commands, and bitwise masking. Waves Provides Waveform methods for the pigpio library. These are methods to send pulses on the pins with precise timing. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Waves.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Waves.html",
    "title": "Class Waves | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Waves Provides Waveform methods for the pigpio library. These are methods to send pulses on the pins with precise timing. Inheritance Object Waves Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Waves Methods GpioWaveAddGeneric(UInt32, GpioPulse[]) This function adds a number of pulses to the current waveform. The pulses are interleaved in time order within the existing waveform (if any). Merging allows the waveform to be built in parts, that is the settings for GPIO#1 can be added, and then GPIO#2 etc. If the added waveform is intended to start after or within the existing waveform then the first pulse should consist of a delay. Declaration public static int GpioWaveAddGeneric(uint numPulses, GpioPulse[] pulses) Parameters Type Name Description UInt32 numPulses the number of pulses. GpioPulse [] pulses an array of pulses. Returns Type Description Int32 Returns the new total number of pulses in the current waveform if OK, otherwise PI_TOO_MANY_PULSES. Examples // Construct and send a 30 microsecond square wave. gpioSetMode(gpio, PI_OUTPUT); pulse[0].gpioOn = (1<<gpio); pulse[0].gpioOff = 0; pulse[0].usDelay = 15; pulse[1].gpioOn = 0; pulse[1].gpioOff = (1<<gpio); pulse[1].usDelay = 15; gpioWaveAddNew(); gpioWaveAddGeneric(2, pulse); wave_id = gpioWaveCreate(); if (wave_id >= 0) { gpioWaveTxSend(wave_id, PI_WAVE_MODE_REPEAT); // Transmit for 30 seconds. sleep(30); gpioWaveTxStop(); } else { // Wave create failed. } GpioWaveAddNew() This function starts a new empty waveform. You wouldn't normally need to call this function as it is automatically called after a waveform is created with the GpioWaveCreate() function. Declaration public static int GpioWaveAddNew() Returns Type Description Int32 Returns 0 if OK. Examples gpioWaveAddNew(); GpioWaveAddSerial(UserGpio, UInt32, UInt32, UInt32, UInt32, UInt32, Byte[]) This function adds a waveform representing serial data to the existing waveform (if any). The serial data starts offset microseconds from the start of the waveform. NOTES: The serial data is formatted as one start bit, data_bits data bits, and stop_bits/2 stop bits. It is legal to add serial data streams with different baud rates to the same waveform. numBytes is the number of bytes of data in str. The bytes required for each character depend upon data_bits. For data_bits 1-8 there will be one byte per character. For data_bits 9-16 there will be two bytes per character. For data_bits 17-32 there will be four bytes per character. Declaration public static int GpioWaveAddSerial(UserGpio userGpio, uint baudRate, uint dataBits, uint stopBits, uint offset, uint numBytes, byte[] str) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 baudRate 50-1000000. UInt32 dataBits 1-32. UInt32 stopBits 2-8. UInt32 offset =0. UInt32 numBytes =1. Byte [] str an array of chars (which may contain nulls). Returns Type Description Int32 Returns the new total number of pulses in the current waveform if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_WAVE_BAUD, PI_BAD_DATABITS, PI_BAD_STOPBITS, PI_TOO_MANY_CHARS, PI_BAD_SER_OFFSET, or PI_TOO_MANY_PULSES. Examples #define MSG_LEN 8 int i; char *str; char data[MSG_LEN]; str = \"Hello world!\"; gpioWaveAddSerial(4, 9600, 8, 2, 0, strlen(str), str); for (i=0; i<MSG_LEN; i++) data[i] = i; // Data added is offset 1 second from the waveform start. gpioWaveAddSerial(4, 9600, 8, 2, 1000000, MSG_LEN, data); GpioWaveChain(Byte[], UInt32) This function transmits a chain of waveforms. NOTE: Any hardware PWM started by GpioHardwarePwm(SystemGpio, UInt32, UInt32) will be cancelled. The waves to be transmitted are specified by the contents of buf which contains an ordered list of wave Ids and optional command codes and related data. Each wave is transmitted in the order specified. A wave may occur multiple times per chain. A blocks of waves may be transmitted multiple times by using the loop commands. The block is bracketed by loop start and end commands. Loops may be nested. Delays between waves may be added with the delay command. The following command codes are supported: Name @ Cmd & Data @ Meaning Loop Start @ 255 0 @ Identify start of a wave block Loop Repeat @ 255 1 x y @ loop x + y 256 times Delay @ 255 2 x y @ delay x + y 256 microseconds Loop Forever @ 255 3 @ loop forever If present Loop Forever must be the last entry in the chain. The code is currently dimensioned to support a chain with roughly 600 entries and 20 loop counters. Declaration public static ResultCode GpioWaveChain(byte[] buffer, uint bufferSize) Parameters Type Name Description Byte [] buffer pointer to the wave_ids and optional command codes. UInt32 bufferSize the number of bytes in buf. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_CHAIN_NESTING, PI_CHAIN_LOOP_CNT, PI_BAD_CHAIN_LOOP, PI_BAD_CHAIN_CMD, PI_CHAIN_COUNTER, PI_BAD_CHAIN_DELAY, PI_CHAIN_TOO_BIG, or PI_BAD_WAVE_ID. Examples #include <stdio.h> #include <pigpio.h> #define WAVES 5 #define GPIO 4 int main(int argc, char *argv[]) { int i, wid[WAVES]; if (gpioInitialise()<0) return -1; gpioSetMode(GPIO, PI_OUTPUT); printf(\"start piscope, press return\"); getchar(); for (i=0; i<WAVES; i++) { gpioWaveAddGeneric(2, (gpioPulse_t[]) {{1<<GPIO, 0, 20}, {0, 1<<GPIO, (i+1)*200}}); wid[i] = gpioWaveCreate(); } gpioWaveChain((char []) { wid[4], wid[3], wid[2], // transmit waves 4+3+2 255, 0, // loop start wid[0], wid[0], wid[0], // transmit waves 0+0+0 255, 0, // loop start wid[0], wid[1], // transmit waves 0+1 255, 2, 0x88, 0x13, // delay 5000us 255, 1, 30, 0, // loop end (repeat 30 times) 255, 0, // loop start wid[2], wid[3], wid[0], // transmit waves 2+3+0 wid[3], wid[1], wid[2], // transmit waves 3+1+2 255, 1, 10, 0, // loop end (repeat 10 times) 255, 1, 5, 0, // loop end (repeat 5 times) wid[4], wid[4], wid[4], // transmit waves 4+4+4 255, 2, 0x20, 0x4E, // delay 20000us wid[0], wid[0], wid[0], // transmit waves 0+0+0 }, 46); while (gpioWaveTxBusy()) time_sleep(0.1); for (i=0; i<WAVES; i++) gpioWaveDelete(wid[i]); printf(\"stop piscope, press return\"); getchar(); gpioTerminate(); } GpioWaveClear() This function clears all waveforms and any data added by calls to the GpioWaveAdd functions. Declaration public static int GpioWaveClear() Returns Type Description Int32 Returns 0 if OK. Examples gpioWaveClear(); GpioWaveCreate() This function creates a waveform from the data provided by the prior calls to the GpioWaveAdd* functions. Upon success a wave id greater than or equal to 0 is returned, otherwise PI_EMPTY_WAVEFORM, PI_TOO_MANY_CBS, PI_TOO_MANY_OOL, or PI_NO_WAVEFORM_ID. The data provided by the GpioWaveAdd* functions is consumed by this function. As many waveforms may be created as there is space available. The wave id is passed to GpioWaveTxSend(UInt32, WaveMode) to specify the waveform to transmit. Normal usage would be Step 1. GpioWaveClear() to clear all waveforms and added data. Step 2. GpioWaveAdd* calls to supply the waveform data. Step 3. GpioWaveCreate() to create the waveform and get a unique id Repeat steps 2 and 3 as needed. Step 4. GpioWaveTxSend(UInt32, WaveMode) with the id of the waveform to transmit. A waveform comprises one of more pulses. Each pulse consists of a GpioPulse structure. The fields specify 1) the GPIO to be switched on at the start of the pulse. 2) the GPIO to be switched off at the start of the pulse. 3) the delay in microseconds before the next pulse. Any or all the fields can be zero. It doesn't make any sense to set all the fields to zero (the pulse will be ignored). When a waveform is started each pulse is executed in order with the specified delay between the pulse and the next. PI_NO_WAVEFORM_ID, PI_TOO_MANY_CBS, or PI_TOO_MANY_OOL. Declaration public static int GpioWaveCreate() Returns Type Description Int32 Returns the new waveform id if OK, otherwise PI_EMPTY_WAVEFORM, PI_NO_WAVEFORM_ID, PI_TOO_MANY_CBS, or PI_TOO_MANY_OOL. Remarks typedef struct { uint gpioOn; uint gpioOff; uint usDelay; } gpioPulse_t;. GpioWaveDelete(UInt32) This function deletes the waveform with id waveId . The wave is flagged for deletion. The resources used by the wave will only be reused when either of the following apply. all waves with higher numbered wave ids have been deleted or have been flagged for deletion. a new wave is created which uses exactly the same resources as the current wave (see the C source for gpioWaveCreate for details). Wave ids are allocated in order, 0, 1, 2, etc. Declaration public static ResultCode GpioWaveDelete(uint waveId) Parameters Type Name Description UInt32 waveId =0, as returned by GpioWaveCreate() . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_WAVE_ID. GpioWaveGetCbs() This function returns the length in DMA control blocks of the current waveform. Declaration public static int GpioWaveGetCbs() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetHighCbs() This function returns the length in DMA control blocks of the longest waveform created since GpioInitialise() was called. Declaration public static int GpioWaveGetHighCbs() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetHighMicros() This function returns the length in microseconds of the longest waveform created since GpioInitialise() was called. Declaration public static int GpioWaveGetHighMicros() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetHighPulses() This function returns the length in pulses of the longest waveform created since GpioInitialise() was called. Declaration public static int GpioWaveGetHighPulses() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetMaxCbs() This function returns the maximum possible size of a waveform in DMA control blocks. Declaration public static int GpioWaveGetMaxCbs() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetMaxMicros() This function returns the maximum possible size of a waveform in microseconds. Declaration public static int GpioWaveGetMaxMicros() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetMaxPulses() This function returns the maximum possible size of a waveform in pulses. Declaration public static int GpioWaveGetMaxPulses() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetMicros() This function returns the length in microseconds of the current waveform. Declaration public static int GpioWaveGetMicros() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveGetPulses() This function returns the length in pulses of the current waveform. Declaration public static int GpioWaveGetPulses() Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioWaveTxAt() This function returns the id of the waveform currently being transmitted. PI_WAVE_NOT_FOUND (9998) - transmitted wave not found. PI_NO_TX_WAVE (9999) - no wave being transmitted. Declaration public static int GpioWaveTxAt() Returns Type Description Int32 Returns the waveform id or one of the following special values:. GpioWaveTxBusy() This function checks to see if a waveform is currently being transmitted. Declaration public static int GpioWaveTxBusy() Returns Type Description Int32 Returns 1 if a waveform is currently being transmitted, otherwise 0. GpioWaveTxSend(UInt32, WaveMode) This function transmits the waveform with id waveId . The mode determines whether the waveform is sent once or cycles endlessly. The SYNC variants wait for the current waveform to reach the end of a cycle or finish before starting the new waveform. WARNING: bad things may happen if you delete the previous waveform before it has been synced to the new waveform. NOTE: Any hardware PWM started by GpioHardwarePwm(SystemGpio, UInt32, UInt32) will be cancelled. otherwise PI_BAD_WAVE_ID, or PI_BAD_WAVE_MODE. Declaration public static int GpioWaveTxSend(uint waveId, WaveMode waveMode) Parameters Type Name Description UInt32 waveId =0, as returned by GpioWaveCreate() . WaveMode waveMode PI_WAVE_MODE_ONE_SHOT, PI_WAVE_MODE_REPEAT, or one of their SYNC variants. Returns Type Description Int32 Returns the number of DMA control blocks in the waveform if OK, otherwise PI_BAD_WAVE_ID, or PI_BAD_WAVE_MODE. Remarks PI_WAVE_MODE_ONE_SHOT_SYNC, PI_WAVE_MODE_REPEAT_SYNC. GpioWaveTxStop() This function aborts the transmission of the current waveform. This function is intended to stop a waveform started in repeat mode. Declaration public static int GpioWaveTxStop() Returns Type Description Int32 Returns 0 if OK. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Utilities.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Utilities.html",
    "title": "Class Utilities | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Utilities Provides various utility methods to retrieve hardware and software versions, time, shell commands, and bitwise masking. Inheritance Object Utilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Utilities Methods ApplyBits(Int32, Boolean, Int32[]) Applies bit values according to the indexes. Declaration public static int ApplyBits(this int flags, bool value, params int[] indexes) Parameters Type Name Description Int32 flags The flags. Boolean value True to set the 1 bits. False to clear the 1 bits. Int32 [] indexes The indexes. Returns Type Description Int32 The applied bitmask. GetBit(Byte, Int32) Gets a bit at the given position index from right to left. Declaration public static bool GetBit(this byte flags, int index) Parameters Type Name Description Byte flags The flags. Int32 index The index. Returns Type Description Boolean The value of the bit at the given position index. GetBit(Int16, Int32) Gets a bit at the given position index from right to left. Declaration public static bool GetBit(this short flags, int index) Parameters Type Name Description Int16 flags The flags. Int32 index The index. Returns Type Description Boolean The value of the bit at the given position index. GetBit(Int32, Int32) Gets a bit at the given position index from right to left. Declaration public static bool GetBit(this int flags, int index) Parameters Type Name Description Int32 flags The flags. Int32 index The index. Returns Type Description Boolean The value of the bit at the given position index. GetBit(UInt16, Int32) Gets a bit at the given position index from right to left. Declaration public static bool GetBit(this ushort flags, int index) Parameters Type Name Description UInt16 flags The flags. Int32 index The index. Returns Type Description Boolean The value of the bit at the given position index. GetBit(UInt32, Int32) Gets a bit at the given position index from right to left. Declaration public static bool GetBit(this uint flags, int index) Parameters Type Name Description UInt32 flags The flags. Int32 index The index. Returns Type Description Boolean The value of the bit at the given position index. GetBitInBytes(Int32, Byte[], Int32) Gets the bit value at the bit position. Declaration public static int GetBitInBytes(int bitPos, byte[] buf, int numBits) Parameters Type Name Description Int32 bitPos bit index from the start of buf. Byte [] buf array of bits. Int32 numBits number of valid bits in buf. Returns Type Description Int32 Returns the value of the bit bitPos bits from the start of buf. Returns 0 if bitPos is greater than or equal to numBits. GpioHardwareRevision() If the hardware revision can not be found or is not a valid hexadecimal number the function returns 0. The hardware revision is the last few characters on the Revision line of /proc/cpuinfo. The revision number can be used to determine the assignment of GPIO to pins (see IO ). There are at least three types of board. Type 1 boards have hardware revision numbers of 2 and 3. Type 2 boards have hardware revision numbers of 4, 5, 6, and 15. Type 3 boards have hardware revision numbers of 16 or greater. for \"Revision : 0002\" the function returns 2. for \"Revision : 000f\" the function returns 15. for \"Revision : 000g\" the function returns 0. Declaration public static uint GpioHardwareRevision() Returns Type Description UInt32 Returns the hardware revision. GpioSetSignalFunc(UInt32, PiGpioSignalDelegate) Registers a function to be called (a callback) when a signal occurs. The function is passed the signal number. One function may be registered per signal. The callback may be cancelled by passing NULL. By default all signals are treated as fatal and cause the library to call gpioTerminate and then exit. Declaration public static ResultCode GpioSetSignalFunc(uint signalNumber, PiGpioSignalDelegate f) Parameters Type Name Description UInt32 signalNumber 0-63. PiGpioSignalDelegate f the callback function. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_signalNumber. GpioSetSignalFuncEx(UInt32, PiGpioSignalExDelegate, UIntPtr) Registers a function to be called (a callback) when a signal occurs. The function is passed the signal number and the userData pointer. Only one of gpioSetSignalFunc or gpioSetSignalFuncEx can be registered per signal. See gpioSetSignalFunc for further details. Declaration public static ResultCode GpioSetSignalFuncEx(uint signalNumber, PiGpioSignalExDelegate callback, UIntPtr userData) Parameters Type Name Description UInt32 signalNumber 0-63. PiGpioSignalExDelegate callback the callback function. UIntPtr userData a pointer to arbitrary user data. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_signalNumber. GpioTick() Tick is the number of microseconds since system boot. As tick is an unsigned 32 bit quantity it wraps around after 2^32 microseconds, which is approximately 1 hour 12 minutes. You don't need to worry about the wrap around as long as you take a tick (uint) from another tick, i.e. the following code will always provide the correct difference. Declaration public static uint GpioTick() Returns Type Description UInt32 Returns the current system tick. Examples uint startTick, endTick; int diffTick; startTick = gpioTick(); // do some processing endTick = gpioTick(); diffTick = endTick - startTick; printf(\"some processing took %d microseconds\", diffTick); GpioTime(TimeType, out Int32, out Int32) Retrieves the seconds and micros variables with the current time. If timetype is PI_TIME_ABSOLUTE updates seconds and micros with the number of seconds and microseconds since the epoch (1st January 1970). If timetype is PI_TIME_RELATIVE updates seconds and micros with the number of seconds and microseconds since the library was initialised. Declaration public static int GpioTime(TimeType timeType, out int seconds, out int microseconds) Parameters Type Name Description TimeType timeType 0 (relative), 1 (absolute). Int32 seconds a pointer to an int to hold seconds. Int32 microseconds a pointer to an int to hold microseconds. Returns Type Description Int32 Returns 0 if OK, otherwise PI_BAD_TIMETYPE. Examples int secs, mics; // print the number of seconds since the library was started gpioTime(PI_TIME_RELATIVE, &secs, &mics); printf(\"library started %d.%03d seconds ago\", secs, mics/1000); GpioVersion() Returns the pigpio version number. Declaration public static uint GpioVersion() Returns Type Description UInt32 Returns the pigpio version. PutBitInBytes(Int32, Byte[], Int32) Sets the bit bitPos bits from the start of buf to bit. Declaration public static void PutBitInBytes(int bitPos, byte[] buf, int bit) Parameters Type Name Description Int32 bitPos bit index from the start of buf. Byte [] buf array of bits. Int32 bit 0-1, value to set. RaiseSignal(Int32) Raises the given UNIX signal number (0 to 63). Declaration public static int RaiseSignal(int signalNumber) Parameters Type Name Description Int32 signalNumber The UNIX signal number from 0 to 63. Returns Type Description Int32 0 for success. SetBit(Byte, Int32, Boolean) Sets a bit at the given position index from right to left. Declaration public static byte SetBit(this byte flags, int index, bool value) Parameters Type Name Description Byte flags The flags. Int32 index The index. Boolean value if set to true [value]. Returns Type Description Byte The flags with the bit set at the given position. SetBit(Int16, Int32, Boolean) Sets a bit at the given position index from right to left. Declaration public static short SetBit(this short flags, int index, bool value) Parameters Type Name Description Int16 flags The flags. Int32 index The index. Boolean value if set to true [value]. Returns Type Description Int16 The flags with the bit set at the given position. SetBit(Int32, Int32, Boolean) Sets a bit at the given position index from right to left. Declaration public static int SetBit(this int flags, int index, bool value) Parameters Type Name Description Int32 flags The flags. Int32 index The index. Boolean value if set to true [value]. Returns Type Description Int32 The flags with the bit set at the given position. SetBit(UInt16, Int32, Boolean) Sets a bit at the given position index from right to left. Declaration public static ushort SetBit(this ushort flags, int index, bool value) Parameters Type Name Description UInt16 flags The flags. Int32 index The index. Boolean value if set to true [value]. Returns Type Description UInt16 The flags with the bit set at the given position. SetBit(UInt32, Int32, Boolean) Sets a bit at the given position index from right to left. Declaration public static uint SetBit(this uint flags, int index, bool value) Parameters Type Name Description UInt32 flags The flags. Int32 index The index. Boolean value if set to true [value]. Returns Type Description UInt32 The flags with the bit set at the given position. Shell(String, String) This function uses the system call to execute a shell script with the given string as its parameter. The exit status of the system call is returned if OK, otherwise PI_BAD_SHELL_STATUS. scriptName must exist in /opt/pigpio/cgi and must be executable. The returned exit status is normally 256 times that set by the shell script exit function. If the script can't be found 32512 will be returned. The following table gives some example returned statuses. Script exit status @ Returned system call status 1 @ 256 5 @ 1280 10 @ 2560 200 @ 51200 script not found @ 32512. Declaration public static ResultCode Shell(string scriptName, string scriptString) Parameters Type Name Description String scriptName the name of the script, only alphanumeric characters,. String scriptString the string to pass to the script. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. Remarks '-' and '_' are allowed in the name. Examples // pass two parameters, hello and world status = shell(\"scr1\", \"hello world\"); // pass three parameters, hello, string with spaces, and world status = shell(\"scr1\", \"hello 'string with spaces' world\"); // pass one parameter, hello string with spaces world status = shell(\"scr1\", \"\\\"hello string with spaces world\\\"\"); TimeTime() Return the current time in seconds since the Epoch. Declaration public static double TimeTime() Returns Type Description Double The result code. 0 for success. See the ResultCode enumeration. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Serial.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Serial.html",
    "title": "Class Serial | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Serial Exposes methods to read from a serial transmission using bit-banging (software-based UART). Writing requires the use of the GpioWaveAddSerial(UserGpio, UInt32, UInt32, UInt32, UInt32, UInt32, Byte[]) method. Inheritance Object Serial Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Serial Methods GpioSerialRead(UserGpio, Byte[], Int32) Wrapper for the native Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.UInt32) . Declaration public static int GpioSerialRead(UserGpio userGpio, byte[] buffer, int readLength) Parameters Type Name Description UserGpio userGpio The user gpio. Byte [] buffer The buffer. Int32 readLength Length of the read. Returns Type Description Int32 The amount of bytes read. GpioSerialRead(UserGpio, Int32) Wrapper for the native Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.UInt32) . Declaration public static byte[] GpioSerialRead(UserGpio userGpio, int readLength) Parameters Type Name Description UserGpio userGpio The user gpio. Int32 readLength Length of the read. Returns Type Description Byte [] The array containing the bytes that were read. GpioSerialReadClose(UserGpio) This function closes a GPIO for bit bang reading of serial data. Declaration public static ResultCode GpioSerialReadClose(UserGpio userGpio) Parameters Type Name Description UserGpio userGpio 0-31, previously opened with GpioSerialReadOpen(UserGpio, UInt32, UInt32) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_NOT_SERIAL_GPIO. GpioSerialReadInvert(UserGpio, Boolean) This function configures the level logic for bit bang serial reads. Use PI_BB_SER_INVERT to invert the serial logic and PI_BB_SER_NORMAL for normal logic. Default is PI_BB_SER_NORMAL. The GPIO must be opened for bit bang reading of serial data using GpioSerialReadOpen(UserGpio, UInt32, UInt32) prior to calling this function. Declaration public static ResultCode GpioSerialReadInvert(UserGpio userGpio, bool invert) Parameters Type Name Description UserGpio userGpio 0-31. Boolean invert 0-1. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_GPIO_IN_USE, PI_NOT_SERIAL_GPIO, or PI_BAD_SER_INVERT. GpioSerialReadOpen(UserGpio, UInt32, UInt32) This function opens a GPIO for bit bang reading of serial data. The serial data is returned in a cyclic buffer and is read using GpioSerialRead(UserGpio, Int32) . It is the caller's responsibility to read data from the cyclic buffer in a timely fashion. Declaration public static ResultCode GpioSerialReadOpen(UserGpio userGpio, uint baudRate, uint dataBits) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 baudRate 50-250000. UInt32 dataBits 1-32. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_WAVE_BAUD, PI_BAD_DATABITS, or PI_GPIO_IN_USE. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Scripts.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Scripts.html",
    "title": "Class Scripts | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Scripts Provides access to scripting methods of the pigpio library. Scripts are used by the pigpio daemon to execute a set of instructions to speedup GPIO instructions. Unused in the managed model of this library but provided for reference purposes. Inheritance Object Scripts Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Scripts Methods GpioDeleteScript(UInt32) This function deletes a stored script. The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID. Declaration public static int GpioDeleteScript(uint script_id) Parameters Type Name Description UInt32 script_id =0, as returned by GpioStoreScript(String) . Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioRunScript(UInt32, UInt32, UInt32[]) This function runs a stored script. The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID, or PI_TOO_MANY_PARAM. param is an array of up to 10 parameters which may be referenced in the script as p0 to p9. Declaration public static int GpioRunScript(uint script_id, uint numPar, uint[] param) Parameters Type Name Description UInt32 script_id =0, as returned by GpioStoreScript(String) . UInt32 numPar 0-10, the number of parameters. UInt32 [] param an array of parameters. Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioScriptStatus(UInt32, UInt32[]) This function returns the run status of a stored script as well as the current values of parameters 0 to 9. The function returns greater than or equal to 0 if OK, otherwise PI_BAD_SCRIPT_ID. The run status may be The current value of script parameters 0 to 9 are returned in param. Declaration public static int GpioScriptStatus(uint script_id, uint[] param) Parameters Type Name Description UInt32 script_id =0, as returned by GpioStoreScript(String) . UInt32 [] param an array to hold the returned 10 parameters. Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. Remarks PI_SCRIPT_INITING PI_SCRIPT_HALTED PI_SCRIPT_RUNNING PI_SCRIPT_WAITING PI_SCRIPT_FAILED. GpioStopScript(UInt32) This function stops a running script. The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID. Declaration public static int GpioStopScript(uint script_id) Parameters Type Name Description UInt32 script_id =0, as returned by GpioStoreScript(String) . Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioStoreScript(String) This function stores a null terminated script for later execution. See [[ http://abyz.me.uk/rpi/pigpio/pigs.html#Scripts ]] for details. The function returns a script id if the script is valid, otherwise PI_BAD_SCRIPT. Declaration public static int GpioStoreScript(string script) Parameters Type Name Description String script the text of the script. Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. GpioUpdateScript(UInt32, UInt32, UInt32[]) This function sets the parameters of a script. The script may or may not be running. The first numPar parameters of the script are overwritten with the new values. The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID, or PI_TOO_MANY_PARAM. param is an array of up to 10 parameters which may be referenced in the script as p0 to p9. Declaration public static int GpioUpdateScript(uint script_id, uint numPar, uint[] param) Parameters Type Name Description UInt32 script_id =0, as returned by GpioStoreScript(String) . UInt32 numPar 0-10, the number of parameters. UInt32 [] param an array of parameters. Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. RawDumpScript(UInt32) Used to print a readable version of a script to stderr. Not intended for general use. Declaration public static void RawDumpScript(uint scriptId) Parameters Type Name Description UInt32 scriptId =0, a script_id returned by GpioStoreScript(String) . Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.RawWaves.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.RawWaves.html",
    "title": "Class RawWaves | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class RawWaves Raw waveform generation methods. These are advanced methods to send pulses on the pins with precise timing. It is recommended that the Waves methods are used instead. Inheritance Object RawWaves Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class RawWaves Methods RawDumpWave() Used to print a readable version of the current waveform to stderr. Not intended for general use. Declaration public static void RawDumpWave() RawWaveAddGeneric(UInt32, RawWave[]) This function adds a number of pulses to the current waveform. The advantage of this function over gpioWaveAddGeneric is that it allows the setting of the flags field. The pulses are interleaved in time order within the existing waveform (if any). Merging allows the waveform to be built in parts, that is the settings for GPIO#1 can be added, and then GPIO#2 etc. If the added waveform is intended to start after or within the existing waveform then the first pulse should consist of a delay. Not intended for general use. Declaration public static int RawWaveAddGeneric(uint numPulses, RawWave[] pulses) Parameters Type Name Description UInt32 numPulses the number of pulses. RawWave [] pulses the array containing the pulses. Returns Type Description Int32 Returns the new total number of pulses in the current waveform if OK, otherwise PI_TOO_MANY_PULSES. RawWaveAddSPI(RawSpiData, UInt32, UInt32, Byte[], UInt32, UInt32, UInt32, UInt32) This function adds a waveform representing SPI data to the existing waveform (if any). Not intended for general use. Declaration public static int RawWaveAddSPI(RawSpiData spi, uint offset, uint spiSS, byte[] buffer, uint spiTxBits, uint spiBitFirst, uint spiBitLast, uint spiBits) Parameters Type Name Description RawSpiData spi a pointer to a spi object. UInt32 offset microseconds from the start of the waveform. UInt32 spiSS the slave select GPIO. Byte [] buffer the bits to transmit, most significant bit first. UInt32 spiTxBits the number of bits to write. UInt32 spiBitFirst the first bit to read. UInt32 spiBitLast the last bit to read. UInt32 spiBits the number of bits to transfer. Returns Type Description Int32 Returns the new total number of pulses in the current waveform if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_SER_OFFSET, or PI_TOO_MANY_PULSES. RawWaveCB() Not intended for general use. Declaration public static uint RawWaveCB() Returns Type Description UInt32 Returns the number of the cb being currently output. RawWaveCBAdr(Int32) Return the (Linux) address of contol block cbNum. Not intended for general use. Declaration public static RawCBS RawWaveCBAdr(int controlBlockNumber) Parameters Type Name Description Int32 controlBlockNumber the cb of interest. Returns Type Description RawCBS The result code. 0 for success. See the ResultCode enumeration. RawWaveGetIn(Int32) Gets the wave input value parameter stored at pos. DEPRECATED: use rawWaveGetOOL instead. Not intended for general use. Declaration [Obsolete(\"use rawWaveGetOOL instead\")] public static uint RawWaveGetIn(int position) Parameters Type Name Description Int32 position the position of interest. Returns Type Description UInt32 The result code. 0 for success. See the ResultCode enumeration. RawWaveGetOOL(Int32) Gets the OOL parameter stored at pos. Not intended for general use. Declaration public static uint RawWaveGetOOL(int position) Parameters Type Name Description Int32 position the position of interest. Returns Type Description UInt32 The result code. 0 for success. See the ResultCode enumeration. RawWaveGetOut(Int32) Gets the wave output parameter stored at pos. DEPRECATED: use rawWaveGetOOL instead. Not intended for general use. Declaration [Obsolete(\"use rawWaveGetOOL instead.\")] public static uint RawWaveGetOut(int position) Parameters Type Name Description Int32 position the position of interest. Returns Type Description UInt32 The result code. 0 for success. See the ResultCode enumeration. RawWaveInfo(Int32) Gets details about the wave with id wave_id. Not intended for general use. Declaration public static RawWaveInformation RawWaveInfo(int waveId) Parameters Type Name Description Int32 waveId the wave of interest. Returns Type Description RawWaveInformation The result code. 0 for success. See the ResultCode enumeration. RawWaveSetIn(Int32, UInt32) Sets the wave input value stored at pos to value. DEPRECATED: use rawWaveSetOOL instead. Not intended for general use. Declaration [Obsolete(\"use rawWaveSetOOL instead\")] public static void RawWaveSetIn(int position, uint value) Parameters Type Name Description Int32 position the position of interest. UInt32 value the value to write. RawWaveSetOOL(Int32, UInt32) Sets the OOL parameter stored at pos to value. Not intended for general use. Declaration public static void RawWaveSetOOL(int position, uint value) Parameters Type Name Description Int32 position the position of interest. UInt32 value the value to write. RawWaveSetOut(Int32, UInt32) Sets the wave output parameter stored at pos to value. DEPRECATED: use rawWaveSetOOL instead. Not intended for general use. Declaration [Obsolete(\"use rawWaveSetOOL instead\")] public static void RawWaveSetOut(int position, uint value) Parameters Type Name Description Int32 position the position of interest. UInt32 value the value to write. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Pwm.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Pwm.html",
    "title": "Class Pwm | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Pwm Provides methods for software and hardware based PWM services for the GPIO pins. All User GPIO pins support PWM. Inheritance Object Pwm Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Pwm Methods GpioGetPwmDutyCycle(UserGpio) Gets the PWM duty cycle. Declaration public static int GpioGetPwmDutyCycle(UserGpio userGpio) Parameters Type Name Description UserGpio userGpio The user gpio. Returns Type Description Int32 The PWM duty cycle. GpioGetPwmFrequency(UserGpio) For normal PWM the frequency will be that defined for the GPIO by GpioSetPwmFrequency(UserGpio, UInt32) . If a hardware clock is active on the GPIO the reported frequency will be that set by GpioHardwareClock(SystemGpio, UInt32) . If hardware PWM is active on the GPIO the reported frequency will be that set by GpioHardwarePwm(SystemGpio, UInt32, UInt32) . Declaration public static int GpioGetPwmFrequency(UserGpio userGpio) Parameters Type Name Description UserGpio userGpio 0-31. Returns Type Description Int32 Returns the frequency (in hertz) used for the GPIO if OK, otherwise PI_BAD_USER_GPIO. Examples f = gpioGetPWMfrequency(23); // Get frequency used for GPIO23. GpioGetPwmRange(UserGpio) If a hardware clock or hardware PWM is active on the GPIO the reported range will be 1000000 (1M). Declaration public static int GpioGetPwmRange(UserGpio userGpio) Parameters Type Name Description UserGpio userGpio 0-31. Returns Type Description Int32 Returns the dutycycle range used for the GPIO if OK, otherwise PI_BAD_USER_GPIO. Examples r = gpioGetPWMrange(23); GpioGetPwmRealRange(UserGpio) If a hardware clock is active on the GPIO the reported real range will be 1000000 (1M). If hardware PWM is active on the GPIO the reported real range will be approximately 250M divided by the set PWM frequency. Declaration public static int GpioGetPwmRealRange(UserGpio userGpio) Parameters Type Name Description UserGpio userGpio 0-31. Returns Type Description Int32 Returns the real range used for the GPIO if OK, otherwise PI_BAD_USER_GPIO. Examples rr = gpioGetPWMrealRange(17); GpioGetServoPulseWidth(UserGpio) Returns 0 (off), 500 (most anti-clockwise) to 2500 (most clockwise). Declaration public static int GpioGetServoPulseWidth(UserGpio userGpio) Parameters Type Name Description UserGpio userGpio The user gpio. Returns Type Description Int32 The Servo pulse width. GpioHardwareClock(SystemGpio, UInt32) Starts a hardware clock on a GPIO at the specified frequency. Frequencies above 30MHz are unlikely to work. The same clock is available on multiple GPIO. The latest frequency setting will be used by all GPIO which share a clock. The GPIO must be one of the following. Access to clock 1 is protected by a password as its use will likely crash the Pi. The password is given by or'ing 0x5A000000 with the GPIO number. Declaration public static ResultCode GpioHardwareClock(SystemGpio gpio, uint clockFrequency) Parameters Type Name Description SystemGpio gpio see description. UInt32 clockFrequency 0 (off) or 4689-250000000 (250M). Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO, PI_NOT_HCLK_GPIO, PI_BAD_HCLK_FREQ,or PI_BAD_HCLK_PASS. Remarks 4 clock 0 All models 5 clock 1 All models but A and B (reserved for system use) 6 clock 2 All models but A and B 20 clock 0 All models but A and B 21 clock 1 All models but A and Rev.2 B (reserved for system use) 32 clock 0 Compute module only 34 clock 0 Compute module only 42 clock 1 Compute module only (reserved for system use) 43 clock 2 Compute module only 44 clock 1 Compute module only (reserved for system use). GpioHardwarePwm(SystemGpio, UInt32, UInt32) Starts hardware PWM on a GPIO at the specified frequency and dutycycle. Frequencies above 30MHz are unlikely to work. NOTE: Any waveform started by GpioWaveTxSend(UInt32, WaveMode) , or GpioWaveChain(Byte[], UInt32) will be cancelled. This function is only valid if the pigpio main clock is PCM. The main clock defaults to PCM but may be overridden by a call to GpioCfgClock(UInt32, CpuPeripheral) . The same PWM channel is available on multiple GPIO. The latest frequency and dutycycle setting will be used by all GPIO which share a PWM channel. The GPIO must be one of the following. The actual number of steps beween off and fully on is the integral part of 250 million divided by PWMfreq. The actual frequency set is 250 million / steps. There will only be a million steps for a PWMfreq of 250. Lower frequencies will have more steps and higher frequencies will have fewer steps. PWMduty is automatically scaled to take this into account. Declaration public static ResultCode GpioHardwarePwm(SystemGpio gpio, uint pwmFrequency, uint pwmDytuCycle) Parameters Type Name Description SystemGpio gpio see description. UInt32 pwmFrequency 0 (off) or 1-125000000 (125M). UInt32 pwmDytuCycle 0 (off) to 1000000 (1M)(fully on). Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO, PI_NOT_HPWM_GPIO, PI_BAD_HPWM_DUTY, PI_BAD_HPWM_FREQ, or PI_HPWM_ILLEGAL. Remarks 12 PWM channel 0 All models but A and B 13 PWM channel 1 All models but A and B 18 PWM channel 0 All models 19 PWM channel 1 All models but A and B 40 PWM channel 0 Compute module only 41 PWM channel 1 Compute module only 45 PWM channel 1 Compute module only 52 PWM channel 0 Compute module only 53 PWM channel 1 Compute module only. GpioPwm(UserGpio, UInt32) Starts PWM on the GPIO, dutycycle between 0 (off) and range (fully on). Range defaults to 255. Arduino style: analogWrite This and the servo functionality use the DMA and PWM or PCM peripherals to control and schedule the pulse lengths and dutycycles. The GpioSetPwmRange(UserGpio, UInt32) function may be used to change the default range of 255. Declaration public static ResultCode GpioPwm(UserGpio userGpio, uint dutyCycle) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 dutyCycle 0-range. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_DUTYCYCLE. Examples gpioPWM(17, 255); // Sets GPIO17 full on. gpioPWM(18, 128); // Sets GPIO18 half on. gpioPWM(23, 0); // Sets GPIO23 full off. GpioServo(UserGpio, UInt32) Starts servo pulses on the GPIO, 0 (off), 500 (most anti-clockwise) to 2500 (most clockwise). The range supported by servos varies and should probably be determined by experiment. A value of 1500 should always be safe and represents the mid-point of rotation. You can DAMAGE a servo if you command it to move beyond its limits. The following causes an on pulse of 1500 microseconds duration to be transmitted on GPIO 17 at a rate of 50 times per second. This will command a servo connected to GPIO 17 to rotate to its mid-point. OTHER UPDATE RATES: This function updates servos at 50Hz. If you wish to use a different update frequency you will have to use the PWM functions. Firstly set the desired PWM frequency using GpioSetPwmFrequency(UserGpio, UInt32) . Then set the PWM range using GpioSetPwmRange(UserGpio, UInt32) to 1E6/frequency. Doing this allows you to use units of microseconds when setting the servo pulsewidth. E.g. If you want to update a servo connected to GPIO25 at 400Hz Thereafter use the PWM command to move the servo, e.g. gpioPWM(25, 1500) will set a 1500 us pulse. Declaration public static ResultCode GpioServo(UserGpio userGpio, uint pulseWidth) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 pulseWidth 0, 500-2500. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_PULSEWIDTH. Remarks PWM Hz 50 100 200 400 500 1E6/Hz 20000 10000 5000 2500 2000 gpioSetPWMfrequency(25, 400); gpioSetPWMrange(25, 2500);. Examples gpioServo(17, 1000); // Move servo to safe position anti-clockwise. gpioServo(23, 1500); // Move servo to centre position. gpioServo(25, 2000); // Move servo to safe position clockwise. GpioSetPwmFrequency(UserGpio, UInt32) Sets the frequency in hertz to be used for the GPIO. If PWM is currently active on the GPIO it will be switched off and then back on at the new frequency. Each GPIO can be independently set to one of 18 different PWM frequencies. The selectable frequencies depend upon the sample rate which may be 1, 2, 4, 5, 8, or 10 microseconds (default 5). The frequencies for each sample rate are:. Declaration public static ResultCode GpioSetPwmFrequency(UserGpio userGpio, uint frequency) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 frequency =0. Returns Type Description ResultCode Returns the numerically closest frequency if OK, otherwise PI_BAD_USER_GPIO. Remarks Hertz 1: 40000 20000 10000 8000 5000 4000 2500 2000 1600 1250 1000 800 500 400 250 200 100 50 2: 20000 10000 5000 4000 2500 2000 1250 1000 800 625 500 400 250 200 125 100 50 25 4: 10000 5000 2500 2000 1250 1000 625 500 400 313 250 200 125 100 63 50 25 13 sample rate (us) 5: 8000 4000 2000 1600 1000 800 500 400 320 250 200 160 100 80 50 40 20 10 8: 5000 2500 1250 1000 625 500 313 250 200 156 125 100 63 50 31 25 13 6 10: 4000 2000 1000 800 500 400 250 200 160 125 100 80 50 40 25 20 10 5. Examples gpioSetPWMfrequency(23, 0); // Set GPIO23 to lowest frequency. gpioSetPWMfrequency(24, 500); // Set GPIO24 to 500Hz. gpioSetPWMfrequency(25, 100000); // Set GPIO25 to highest frequency. GpioSetPwmRange(UserGpio, UInt32) Selects the dutycycle range to be used for the GPIO. Subsequent calls to gpioPWM will use a dutycycle between 0 (off) and range (fully on). If PWM is currently active on the GPIO its dutycycle will be scaled to reflect the new range. The real range, the number of steps between fully off and fully on for each frequency, is given in the following table. The real value set by GpioPwm(UserGpio, UInt32) is (dutycycle * real range) / range. Declaration public static ResultCode GpioSetPwmRange(UserGpio userGpio, uint range) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 range 25-40000. Returns Type Description ResultCode Returns the real range for the given GPIO's frequency if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_DUTYRANGE. Remarks 25, 50, 100, 125, 200, 250, 400, 500, 625, 800, 1000, 1250, 2000, 2500, 4000, 5000, 10000, 20000. Examples gpioSetPWMrange(24, 2000); // Now 2000 is fully on // 1000 is half on // 500 is quarter on, etc. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Custom.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Custom.html",
    "title": "Class Custom | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Custom Defines method calls for cutom functions. These calls are reserved but still provided for reference purposes. They are unused in the managed model of this library. Inheritance Object Custom Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Custom Methods GpioCustom1(UInt32, UInt32, Byte[], UInt32) This function is available for user customisation. It returns a single integer value. Declaration public static int GpioCustom1(uint arg1, uint arg2, byte[] argx, uint argc) Parameters Type Name Description UInt32 arg1 Argument 1: >=0. UInt32 arg2 Argument 2: >=0. Byte [] argx extra (byte) arguments. UInt32 argc number of extra arguments. Returns Type Description Int32 Returns >= 0 if OK, less than 0 indicates a user defined error. GpioCustom2(UInt32, Byte[], UInt32, Byte[], UInt32) This function is available for user customisation. It differs from gpioCustom1 in that it returns an array of bytes rather than just an integer. The returned value is an integer indicating the number of returned bytes. The number of returned bytes must be retMax or less. Declaration public static int GpioCustom2(uint arg1, byte[] argx, uint argc, byte[] retBuf, uint retMax) Parameters Type Name Description UInt32 arg1 =0. Byte [] argx extra (byte) arguments. UInt32 argc number of extra arguments. Byte [] retBuf buffer for returned bytes. UInt32 retMax maximum number of bytes to return. Returns Type Description Int32 Returns >= 0 if OK, less than 0 indicates a user defined error. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.html",
    "title": "Namespace Unosquare.PiGpio.NativeEnums | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Namespace Unosquare.PiGpio.NativeEnums Enums AllocationMode Enumerates the different memory allocation mode. BitMask Provides an enumeration of a 32-bit mask. BoardType Enumerates the different Raspberry Pi board types. ConfigFlags Enumerates the different configuration flags. CpuPeripheral Defines the 2 different CPU peripherals for DMA. DigitalValue Enumerates the digital values. Equivalent to True and False. DmaChannel Enumerates the different DMA channels. EdgeDetection Defines the edge detection strategies. FileModeFlags Enumerates the different file acces modes. GpioPadId Enumerates the GPIO (electrical) Pads 0 @ 0-27 1 @ 28-45 2 @ 46-53. GpioPadStrength Enumerates the different Pad Strengths in milli Amperes. GpioPullMode Input GPIOS have pull-up, pull-down or no resistors. This enumeration defines the different resistor pull modes. I2cBusId The Pi has 2 hardware SPI buses. Bus 0 and Bus 1. Bus 1 is the default one, accessible through the main P1 header. I2cQuickMode Enumerates the quick modes. InterfaceFlags Defines flags to enable or disable network interfaces. LevelChange Enumerates the different change states for edge detection. PinDirection Enumerates the IO directions. This enumeration is compatible with the PinMode enum. PinMode Pins can operate in different modes. This enumeration defines the fdifferent operation modes from 0 to 7. ResultCode Defines the different operation result codes from calling pigpio API. 0 is OK. Anything negative is an error. SeekMode Defines the different file seek modes. SoftSpiFlags Defines the Software-based SPI flags. SpiChannelId Enumerates the different SPI Channels. SpiFlags SPI Open Flags. SystemGpio Provides an enumeration of System GPIOs from 0 to 53. User GPIOs are from 0 to 31 (some of them are reserved depending on hardware). All chip GPIOs go from 0 to 53. It is safe to read all of them but writing to some of them might crash the hardware and corrupt the SD card. So use documetned ones only. TimerId The Pi can register up to 10 hardware timers. This lists all 10 hardware timers from 0 to 9. TimeType Time Type enumeration. UartRate Defines the valid UART rates. UserGpio Provides an enumeration of User GPIOs from 0 to 31. Do not use undocumented pin numbers because they might be reserved or crash the hardware and corrupt the SD card. WaveMode Enumerates the different wave modes. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.WaveMode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.WaveMode.html",
    "title": "Enum WaveMode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum WaveMode Enumerates the different wave modes. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum WaveMode Fields Name Description OneShot The one shot wave mode OneShotSync The one shot synchronize wave mode Repeat The repeat wave mode RepeatSync The repeat synchronize wave mode Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.UserGpio.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.UserGpio.html",
    "title": "Enum UserGpio | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum UserGpio Provides an enumeration of User GPIOs from 0 to 31. Do not use undocumented pin numbers because they might be reserved or crash the hardware and corrupt the SD card. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum UserGpio Fields Name Description Bcm00 The BCM GPIO 00 Bcm01 The BCM GPIO 01 Bcm02 The BCM GPIO 02 Bcm03 The BCM GPIO 03 Bcm04 The BCM GPIO 04 Bcm05 The BCM GPIO 05 Bcm06 The BCM GPIO 06 Bcm07 The BCM GPIO 07 Bcm08 The BCM GPIO 08 Bcm09 The BCM GPIO 09 Bcm10 The BCM GPIO 10 Bcm11 The BCM GPIO 11 Bcm12 The BCM GPIO 12 Bcm13 The BCM GPIO 13 Bcm14 The BCM GPIO 14 Bcm15 The BCM GPIO 15 Bcm16 The BCM GPIO 16 Bcm17 The BCM GPIO 17 Bcm18 The BCM GPIO 18 Bcm19 The BCM GPIO 19 Bcm20 The BCM GPIO 20 Bcm21 The BCM GPIO 21 Bcm22 The BCM GPIO 22 Bcm23 The BCM GPIO 23 Bcm24 The BCM GPIO 24 Bcm25 The BCM GPIO 25 Bcm26 The BCM GPIO 26 Bcm27 The BCM GPIO 27 Bcm28 The BCM GPIO 28 Bcm29 The BCM GPIO 29 Bcm30 The BCM GPIO 30 Bcm31 The BCM GPIO 31 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.SpiFlags.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.SpiFlags.html",
    "title": "Enum SpiFlags | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum SpiFlags SPI Open Flags. Namespace : Unosquare.PiGpio.NativeEnums Syntax [Flags] public enum SpiFlags Fields Name Description ByteCount3WireBit0 The byte count3 wire bit0 ByteCount3WireBit1 The byte count3 wire bit1 ByteCount3WireBit2 The byte count3 wire bit2 ByteCount3WireBit3 The byte count3 wire bit3 ChipEnableActiveLowBit0 The chip enable active low bit0 ChipEnableActiveLowBit1 The chip enable active low bit1 ChipEnableActiveLowBit2 The chip enable active low bit2 ChipEnableReservedBit0 The chip enable reserved bit0 ChipEnableReservedBit1 The chip enable reserved bit1 ChipEnableReservedBit2 The chip enable reserved bit2 Default The default InvertMiso The invert miso InvertMosi The invert mosi ModeBit0 The mode bit0 ModeBit1 The mode bit1 Use3WireDevice The use3 wire device UseAuxiliarySpi The use auxiliary spi WordSizeBit0 The word size bit0 WordSizeBit1 The word size bit1 WordSizeBit2 The word size bit2 WordSizeBit3 The word size bit3 WordSizeBit4 The word size bit4 WordSizeBit5 The word size bit5 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.SpiChannelId.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.SpiChannelId.html",
    "title": "Enum SpiChannelId | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum SpiChannelId Enumerates the different SPI Channels. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum SpiChannelId Fields Name Description SpiChannel0 The spi channel 0 SpiChannel1 The spi channel 1 SpiChannel2 The spi channel 2 (Auxiliary) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.SoftSpiFlags.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.SoftSpiFlags.html",
    "title": "Enum SoftSpiFlags | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum SoftSpiFlags Defines the Software-based SPI flags. Namespace : Unosquare.PiGpio.NativeEnums Syntax [Flags] public enum SoftSpiFlags Fields Name Description ClockPhaseLeadingEdge For CPHA=1, the out side changes the data on the leading edge of the current clock cycle, while the in side captures the data on (or shortly after) the trailing edge of the clock cycle. The out side holds the data valid until the leading edge of the following clock cycle. For the last cycle, the slave holds the MISO line valid until slave select is deasserted. ClockPolarityIdleHigh CPOL=1 is a clock which idles at 1, and each cycle consists of a pulse of 0. That is, the leading edge is a falling edge, and the trailing edge is a rising edge. Default The default flags (all 0) MisoInvert R is 1 if the least significant bit is received on MISO first, the default (0) receives the most significant bit first. MosiInvert T is 1 if the least significant bit is transmitted on MOSI first, the default (0) shifts the most significant bit out first. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.SeekMode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.SeekMode.html",
    "title": "Enum SeekMode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum SeekMode Defines the different file seek modes. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum SeekMode Fields Name Description FromCurrent From the current file position FromEnd From the end position (backwards) FromStart From the start of the file Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.PinDirection.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.PinDirection.html",
    "title": "Enum PinDirection | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum PinDirection Enumerates the IO directions. This enumeration is compatible with the PinMode enum. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum PinDirection Fields Name Description Alternative The pin is operating in an alternative mode. Input The input operating mode Output The output operating mode Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.LevelChange.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.LevelChange.html",
    "title": "Enum LevelChange | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum LevelChange Enumerates the different change states for edge detection. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum LevelChange Fields Name Description HighToLow Change to low (a falling edge) LowToHigh Change to high (a rising edge) NoChange No level change (a watchdog timeout) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.I2cBusId.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.I2cBusId.html",
    "title": "Enum I2cBusId | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum I2cBusId The Pi has 2 hardware SPI buses. Bus 0 and Bus 1. Bus 1 is the default one, accessible through the main P1 header. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum I2cBusId Fields Name Description Bus0 The 0th I2c Bus Bus1 The 1st I2c Bus -- This is the default bus number on the Pi. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.GpioPullMode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.GpioPullMode.html",
    "title": "Enum GpioPullMode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum GpioPullMode Input GPIOS have pull-up, pull-down or no resistors. This enumeration defines the different resistor pull modes. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum GpioPullMode Fields Name Description Down Pull-down resistor mode configuration Off No pull-up or pull-down mode. Up Pull-up resistor mode configuration Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.FileModeFlags.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.FileModeFlags.html",
    "title": "Enum FileModeFlags | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum FileModeFlags Enumerates the different file acces modes. Namespace : Unosquare.PiGpio.NativeEnums Syntax [Flags] public enum FileModeFlags Fields Name Description Append The append mode flag Create The create mode flag Read The read mode flag Truncate The truncate mode flag Write The write mode flag Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.EdgeDetection.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.EdgeDetection.html",
    "title": "Enum EdgeDetection | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum EdgeDetection Defines the edge detection strategies. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum EdgeDetection Fields Name Description EitherEdge Rising and falling edge detection strategy FallingEdge The falling edge (from high to low voltage) RisingEdge The rising edge (from low to high voltage) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.CpuPeripheral.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.CpuPeripheral.html",
    "title": "Enum CpuPeripheral | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum CpuPeripheral Defines the 2 different CPU peripherals for DMA. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum CpuPeripheral Fields Name Description Pcm The Pulse-Code Modulation peripheral Pwm The Pulse-Width modulation peripheral Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.ConfigFlags.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.ConfigFlags.html",
    "title": "Enum ConfigFlags | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum ConfigFlags Enumerates the different configuration flags. Namespace : Unosquare.PiGpio.NativeEnums Syntax [Flags] public enum ConfigFlags : uint Fields Name Description AlertFrequency0 The alert frequency0 AlertFrequency1 The alert frequency1 AlertFrequency2 The alert frequency2 AlertFrequency3 The alert frequency3 DebugLevel0 The debug level0 DebugLevel1 The debug level1 DebugLevel2 The debug level2 DebugLevel3 The debug level3 NoSignalHandler The no signal handler RealTimePriority The real time priority Stats The stats Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.AllocationMode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.AllocationMode.html",
    "title": "Enum AllocationMode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum AllocationMode Enumerates the different memory allocation mode. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum AllocationMode Fields Name Description Auto The automatic allocation mode MailBox The mail box allocation mode PageMap The page map allocation mode Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.html",
    "title": "Namespace Unosquare.PiGpio.ManagedModel | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Namespace Unosquare.PiGpio.ManagedModel Classes BoardPeripheralsService Provides methods to open communication links on the available buses such as SPI, I2C, and UART. BoardTimingService Provides timing, date and delay functions. Also provides access to registered timers. BoardWaveService Provides a a pin service to generate pulses with microsecond precision. GpioBank Provides access to bulk GPIO read and write operations. GpioPad Represents an electrical pad which groups GPIO pins and has configurable electrical drive strength. GpioPadCollection A collection of GPIO electrical pads. GpioPin A class representing a GPIO port (pin). GpioPinAlertService Provides GPIO pin functionality to report on alerts based on sampling of 5 microseconds approximately. GpioPinClockService Provides a hardware clock services on the associated pin. Only a few pins support this. GpioPinCollection Represents a dictionary of all GPIO Pins. GpioPinInterruptService Provides Interrupt Service Routine callback services on the GPIO pin. GpioPinPwmService Provides hardware-based PWM services on the pin. GpioPinServiceBase Provides a base implementation of a GPIO Pin Service. GpioPinServoService Provides a standard servo PWM service running at 50Hz. The pulse width must be 0, or a number beween 500 and 2500. GpioPinSoftPwmService Provides a software-based PWM service on the associated pin. I2cDevice Represents a peripheral connected via the I2C/SM bus. SoftI2cBus Provides a software based (bit-banged) I2C bus on 2 pins. SoftSerialPort Provides a software based (bit-banged Serial Port). SoftSpiChannel Provides a bit-banged version of a SPI channel. SpiChannel Provides access to the Hardware SPI channels. UartPort Provides libpigpio implementation of a UART port. Alternatively you can use the System.IO.Ports.SerialPort implementation. WaveBuilder Provides methods to build and render waveforms. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.SpiChannel.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.SpiChannel.html",
    "title": "Class SpiChannel | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class SpiChannel Provides access to the Hardware SPI channels. Inheritance Object SpiChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class SpiChannel : IDisposable Properties BaudRate Gets the baud rate in bits per second. Declaration public int BaudRate { get; } Property Value Type Description Int32 Channel Gets the SPI channel identifier. Declaration public SpiChannelId Channel { get; } Property Value Type Description SpiChannelId Flags Gets the SPI flags this channel was opened with. Declaration public SpiFlags Flags { get; } Property Value Type Description SpiFlags Handle Gets the SPI channel handle. Declaration public UIntPtr Handle { get; } Property Value Type Description UIntPtr Methods Dispose() Declaration public void Dispose() Read() Reads up to one tenth of the byte rate. Declaration public byte[] Read() Returns Type Description Byte [] The bytes that were read. Read(Byte[], Int32, Int32) Reads int the specified buffer. Declaration public int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The buffer. Int32 offset The offset. Int32 count The count. Returns Type Description Int32 The number of bytes read into the buffer. Read(Int32) Reads up to the specified number of bytes. Declaration public byte[] Read(int count) Parameters Type Name Description Int32 count The count. Returns Type Description Byte [] The bytes read. Transfer(Byte[]) Transfers the specified buffer and simultaneously reads the same amount of buyes in that send buffer. Declaration public byte[] Transfer(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Returns Type Description Byte [] The bytes that were read. Write(Byte[]) Writes the specified buffer. Declaration public int Write(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Returns Type Description Int32 The number of bytes written. Write(Byte[], Int32, Int32) Writes the specified buffer. Declaration public int Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer The buffer. Int32 offset The offset. Int32 count The count. Returns Type Description Int32 The number of bytes written. Implements System.IDisposable See Also IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.SoftSpiChannel.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.SoftSpiChannel.html",
    "title": "Class SoftSpiChannel | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class SoftSpiChannel Provides a bit-banged version of a SPI channel. Inheritance Object SoftSpiChannel Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class SoftSpiChannel : IDisposable Properties BaudRate Gets the baud rate. Declaration public int BaudRate { get; } Property Value Type Description Int32 ChipSelectPin Gets the chip select pin. Declaration public GpioPin ChipSelectPin { get; } Property Value Type Description GpioPin ClockPin Gets the clock pin. Declaration public GpioPin ClockPin { get; } Property Value Type Description GpioPin Flags Gets the flags. Declaration public SoftSpiFlags Flags { get; } Property Value Type Description SoftSpiFlags Handle Gets the handle. Declaration public UserGpio Handle { get; } Property Value Type Description UserGpio MisoPin Gets the MISO pin. Declaration public GpioPin MisoPin { get; } Property Value Type Description GpioPin MosiPin Gets the MOSI pin. Declaration public GpioPin MosiPin { get; } Property Value Type Description GpioPin Methods Dispose() Declaration public void Dispose() Transfer(Byte[]) Transfers the specified transmit buffer and returns the read bytes in a new buffer. Declaration public byte[] Transfer(byte[] transmitBuffer) Parameters Type Name Description Byte [] transmitBuffer The transmit buffer. Returns Type Description Byte [] The received bytes as a result of writing to the ring buffer. Implements System.IDisposable See Also IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "README.html": {
    "href": "README.html",
    "title": "Raspbery Pi - libpigpio for .net | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Raspbery Pi - libpigpio for .net ⭐ Please star this project if you find it useful! Provides complete managed access to the popular pigpio C library. The premise is simple: using the powerful features of C# to control the ARM peripherals of the Raspberry Pi. This library provides a comprehensive way to access the hardware of the Pi. It uses the fantastic C library pigpio . The documentation of the library can be found here . As a programmer, the choice is yours. You can call the native methods either directly or via the comprehensive API of PiGpio.net. Example of blinking an LED with direct native calls Setup.GpioInitialise(); var pin = SystemGpio.Bcm18; IO.GpioSetMode(pin, PinMode.Output); while (true) { IO.GpioWrite(pin, true); Thread.Sleep(500); IO.GpioWrite(pin, false); Thread.Sleep(500); } Example of blinking an LED with the PiGpio.net Managed API var pin = Board.Pins[18]; while (true) { pin.Value = !pin.Value; Thread.Sleep(500); } Related Projects and Nugets Name Author Description RaspberryIO Unosquare The Raspberry Pi's IO Functionality in an easy-to-use API for .NET (Mono/.NET Core). PiGpio.net Unosquare Provides complete managed access to the popular pigpio C library Raspberry Abstractions Unosquare Allows you to implement your own provider for RaspberryIO. Raspberry# IO raspberry-sharp Raspberry# IO is a .NET/Mono IO Library for Raspberry Pi. This project is an initiative of the Raspberry# Community. WiringPi.Net Daniel Riches A simple C# wrapper for Gordon's WiringPi library. PiSharp Andy Bradford Pi# is a library to expose the GPIO functionality of the Raspberry Pi computer to the C# and Visual Basic.Net languages"
  },
  "api/Unosquare.PiGpio.NativeEnums.SystemGpio.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.SystemGpio.html",
    "title": "Enum SystemGpio | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum SystemGpio Provides an enumeration of System GPIOs from 0 to 53. User GPIOs are from 0 to 31 (some of them are reserved depending on hardware). All chip GPIOs go from 0 to 53. It is safe to read all of them but writing to some of them might crash the hardware and corrupt the SD card. So use documetned ones only. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum SystemGpio Fields Name Description Bcm00 The BCM GPIO 00 Bcm01 The BCM GPIO 01 Bcm02 The BCM GPIO 02 Bcm03 The BCM GPIO 03 Bcm04 The BCM GPIO 04 Bcm05 The BCM GPIO 05 Bcm06 The BCM GPIO 06 Bcm07 The BCM GPIO 07 Bcm08 The BCM GPIO 08 Bcm09 The BCM GPIO 09 Bcm10 The BCM GPIO 10 Bcm11 The BCM GPIO 11 Bcm12 The BCM GPIO 12 Bcm13 The BCM GPIO 13 Bcm14 The BCM GPIO 14 Bcm15 The BCM GPIO 15 Bcm16 The BCM GPIO 16 Bcm17 The BCM GPIO 17 Bcm18 The BCM GPIO 18 Bcm19 The BCM GPIO 19 Bcm20 The BCM GPIO 20 Bcm21 The BCM GPIO 21 Bcm22 The BCM GPIO 22 Bcm23 The BCM GPIO 23 Bcm24 The BCM GPIO 24 Bcm25 The BCM GPIO 25 Bcm26 The BCM GPIO 26 Bcm27 The BCM GPIO 27 Bcm28 The BCM GPIO 28 Bcm29 The BCM GPIO 29 Bcm30 The BCM GPIO 30 Bcm31 The BCM GPIO 31 Bcm32 The BCM GPIO 32 Bcm33 The BCM GPIO 33 Bcm34 The BCM GPIO 34 Bcm35 The BCM GPIO 35 Bcm36 The BCM GPIO 36 Bcm37 The BCM GPIO 37 Bcm38 The BCM GPIO 38 Bcm39 The BCM GPIO 39 Bcm40 The BCM GPIO 40 Bcm41 The BCM GPIO 41 Bcm42 The BCM GPIO 42 Bcm43 The BCM GPIO 43 Bcm44 The BCM GPIO 44 Bcm45 The BCM GPIO 45 Bcm46 The BCM GPIO 46 Bcm47 The BCM GPIO 47 Bcm48 The BCM GPIO 48 Bcm49 The BCM GPIO 49 Bcm50 The BCM GPIO 50 Bcm51 The BCM GPIO 51 Bcm52 The BCM GPIO 52 Bcm53 The BCM GPIO 53 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.ResultCode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.ResultCode.html",
    "title": "Enum ResultCode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum ResultCode Defines the different operation result codes from calling pigpio API. 0 is OK. Anything negative is an error. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum ResultCode Fields Name Description BadBufMillis buf millis not 100-10000 BadCfgInternal bad parameter in gpioCfgInternals call BadChainCmd bad chain command BadChainDelay bad chain delay micros BadChainLoop empty chain loop BadChannel DMA channel not 0-14 BadClkMicros clock micros not 1, 2, 4, 5, 8, or 10 BadClkPeriph clock peripheral not 0-1 BadClkSource DEPRECATED BadDatabits serial data bits not 1-32 BadDutycycle dutycycle outside set range BadDutyrange dutycycle range not 25-40000 BadEdge bad ISR edge value, not 0-2 BadEventId bad event id BadFifoCommand unrecognized fifo command BadFileFlag bad file flag BadFileMode bad file mode BadFileRead bad file read BadFileSeek bad file seek BadFileWrite bad file write BadFilter bad filter parameter BadFlags bad i2c/spi/ser open flags BadForever loop forever must be last command BadGpio GPIO not 0-53 BadHandle unknown handle BadHclkFreq hardware clock frequency not 4689-250M BadHclkPass need password to use hardware clock 1 BadHpwmDuty hardware PWM dutycycle not 0-1M BadHpwmFreq hardware PWM frequency not 1-125M BadI2cAddr bad I2C address BadI2cBaud bad I2C baud rate, not 50-500k BadI2cBus bad I2C bus BadI2cCmd bad I2C command BadI2cRlen bad I2C read length BadI2cSeg an I2C transaction segment failed BadI2cWlen bad I2C write length BadIfFlags ifFlags > 4 BadIsrInit bad ISR initialisation BadLevel level not 0-1 BadMallocMode bad memory allocation mode BadMicros micros not 0-999999 BadMicsDelay bad MICS delay (too large) BadMilsDelay bad MILS delay (too large) BadMode mode not 0-7 BadMs ms not 10-60000 BadPad bad pad number BadParam bad i2c/spi/ser parameter BadParamNum script parameter id not 0-9 BadPathname can't open pathname BadPointer bad (NULL) pointer BadPud pud not 0-2 BadPulselen trigger pulse length not 1-100 BadPulsewidth pulsewidth not 0 or 500-2500 BadScript invalid script BadScriptCmd illegal script command BadScriptId unknown script id BadScriptName bad script name BadSecoChannel DMA secondary channel not 0-6 BadSeconds seconds < 0 BadSerDevice bad serial device name BadSerialBuf bad (null) serial buf parameter BadSerialCount must read at least a byte at a time BadSerialStruc bad (null) serial structure parameter BadSerInvert bit bang serial invert not 0 or 1 BadSerOffset add serial data offset > 30 minutes BadSerSpeed bad serial baud rate BadShellStatus bad shell return status BadSignum signum not 0-63 BadSmbusCmd SMBus command not supported by driver BadSocketPort socket port not 1024-32000 BadSpiBaud bad SPI baud rate, not 50-500k BadSpiChannel bad SPI channel BadSpiCount bad SPI count BadSpiSpeed bad SPI speed BadStopbits serial (half) stop bits not 2-8 BadStrength bad pad drive strength BadTag script has unresolved tag BadTimer timer not 0-9 BadTimetype timetype not 0-1 BadUserGpio GPIO not 0-31 BadVarNum script variable id not 0-149 BadWaveBaud baud rate not 50-250K(RX)/50-1M(TX) BadWaveId non existent wave id BadWaveMode waveform mode not 0-3 BadWdogTimeout timeout not 0-60000 BadWvscCommnd bad WVSC subcommand BadWvsmCommnd bad WVSM subcommand BadWvspCommnd bad WVSP subcommand ChainCounter too many chain counters ChainLoopCnt bad chain loop count ChainNesting chain counters nested too deeply ChainTooBig chain is too long CmdInterrupted Used by Python CustomErr0 Documentation not available CustomErr999 Documentation not available Deprecated deprecated function removed DupTag script has duplicate tag EmptyWaveform attempt to create an empty waveform FileIsADir file is a directory FileNotRopen file not open for read FileNotWopen file not open for write FilOpenFailed file open failed GpioInUse GPIO already in use HpwmIllegal illegal, PWM in use for main clock I2cOpenFailed can't open I2C device I2cReadFailed i2c read failed I2cWriteFailed i2c write failed InitFailed gpioInitialise failed Initialised function called after gpioInitialise MsgToobig socket/pipe message too big NoAlertFunc DEPRECATED NoAuxSpi no auxiliary SPI on Pi A or B NoFileAccess no permission to access file NoFileMatch no files match pattern NoHandle no handle available NoMemory can't allocate temporary memory NoScriptRoom no more room for scripts NotHclkGpio GPIO has no hardware clock NotHpwmGpio GPIO has no hardware PWM NotI2cGpio no bit bang I2C in progress on GPIO NotInitialised function called before gpioInitialise NotPermitted GPIO operation not permitted NotPwmGpio GPIO is not in use for PWM NotSerialGpio no bit bang serial read on GPIO NotServoGpio GPIO is not in use for servo pulses NotSpiGpio no bit bang SPI in progress on GPIO NoWaveformId no more waveforms Ok OK result code PigifErr0 Documentation not available PigifErr99 Documentation not available ScriptNotReady script initialising SerOpenFailed can't open serial device SerReadFailed ser read failed SerReadNoData ser read no data available SerWriteFailed ser write failed SockReadFailed socket read failed SockWritFailed socket write failed SomePermitted one or more GPIO not permitted SpiOpenFailed can't open SPI device SpiXferFailed spi xfer/read/write failed TimerFailed gpioSetTimerFunc failed TooManyCbs No more CBs for waveform TooManyChars waveform has too many chars TooManyOol No more OOL for waveform TooManyParam too many script parameters (> 10) TooManyPulses waveform has too many pulses TooManySegs too many I2C transaction segments TooManyTags script has too many tags UnknownCommand unknown command Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.PinMode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.PinMode.html",
    "title": "Enum PinMode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum PinMode Pins can operate in different modes. This enumeration defines the fdifferent operation modes from 0 to 7. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum PinMode Fields Name Description Alt0 The alt0 operating mode Alt1 The alt1 operating mode Alt2 The alt2 operating mode Alt3 The alt3 operating mode Alt4 The alt4 operating mode Alt5 The alt5 operating mode Input The input operating mode Output The output operating mode Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.InterfaceFlags.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.InterfaceFlags.html",
    "title": "Enum InterfaceFlags | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum InterfaceFlags Defines flags to enable or disable network interfaces. Namespace : Unosquare.PiGpio.NativeEnums Syntax [Flags] public enum InterfaceFlags Fields Name Description DisableFifoInterface The disable FIFO interface DisableSocketInterface The disable socket interface LocalhostInterface The localhost interface Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.I2cQuickMode.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.I2cQuickMode.html",
    "title": "Enum I2cQuickMode | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum I2cQuickMode Enumerates the quick modes. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum I2cQuickMode Fields Name Description Read The read mode Write The write mode Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.GpioPadStrength.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.GpioPadStrength.html",
    "title": "Enum GpioPadStrength | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum GpioPadStrength Enumerates the different Pad Strengths in milli Amperes. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum GpioPadStrength Fields Name Description PadStrength10mA The pad strength 10 mA PadStrength11mA The pad strength 11mA PadStrength12mA The pad strength 12 mA PadStrength13mA The pad strength 13 mA PadStrength14mA The pad strength 14 mA PadStrength15mA The pad strength 15 mA PadStrength16mA The pad strength 16 mA PadStrength1mA The pad strength 1 mA PadStrength2mA The pad strength 2 mA PadStrength3mA The pad strength 3 mA PadStrength4mA The pad strength 4 mA PadStrength5mA The pad strength 5 mA PadStrength6mA The pad strength 6 mA PadStrength7mA The pad strength 7 mA PadStrength8mA The pad strength 8 mA PadStrength9mA The pad strength 9 mA Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.GpioPadId.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.GpioPadId.html",
    "title": "Enum GpioPadId | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum GpioPadId Enumerates the GPIO (electrical) Pads 0 @ 0-27 1 @ 28-45 2 @ 46-53. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum GpioPadId Fields Name Description Pad00To27 The pad of GPIO 0 to 27 Pad28To45 The pad of GPIO 28 to 45 Pad46To53 The pad of GPIO 46 to53 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.DmaChannel.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.DmaChannel.html",
    "title": "Enum DmaChannel | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum DmaChannel Enumerates the different DMA channels. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum DmaChannel Fields Name Description Dma00 DMA Channel 0 Dma01 DMA Channel 1 Dma02 DMA Channel 2 Dma03 DMA Channel 3 Dma04 DMA Channel 4 Dma05 DMA Channel 5 Dma06 DMA Channel 6 Dma07 DMA Channel 7 Dma08 DMA Channel 8 Dma09 DMA Channel 9 Dma10 DMA Channel 10 Dma11 DMA Channel 11 Dma12 DMA Channel 12 Dma13 DMA Channel 13 Dma14 DMA Channel 14 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.DigitalValue.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.DigitalValue.html",
    "title": "Enum DigitalValue | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum DigitalValue Enumerates the digital values. Equivalent to True and False. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum DigitalValue Fields Name Description False The low value; low voltage or logical 0 (false) True The high value; high voltage or logical 1 (true) Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.BoardType.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.BoardType.html",
    "title": "Enum BoardType | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum BoardType Enumerates the different Raspberry Pi board types. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum BoardType Fields Name Description Type1 Type 1 - Model B (original model) Type2 Type 2 - Model A and B (revision 2) Type3 Type 3 - Model A+, B+, Pi Zero, Pi2B, Pi3B Unknown Unknown board type Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.BitMask.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.BitMask.html",
    "title": "Enum BitMask | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum BitMask Provides an enumeration of a 32-bit mask. Namespace : Unosquare.PiGpio.NativeEnums Syntax [Flags] public enum BitMask : uint Fields Name Description All An full bitmask Bit00 The bit at index 00, from right LSB to left MSB Bit01 The bit at index 01, from right LSB to left MSB Bit02 The bit at index 02, from right LSB to left MSB Bit03 The bit at index 03, from right LSB to left MSB Bit04 The bit at index 04, from right LSB to left MSB Bit05 The bit at index 05, from right LSB to left MSB Bit06 The bit at index 06, from right LSB to left MSB Bit07 The bit at index 07, from right LSB to left MSB Bit08 The bit at index 08, from right LSB to left MSB Bit09 The bit at index 09, from right LSB to left MSB Bit10 The bit at index 10, from right LSB to left MSB Bit11 The bit at index 11, from right LSB to left MSB Bit12 The bit at index 12, from right LSB to left MSB Bit13 The bit at index 13, from right LSB to left MSB Bit14 The bit at index 14, from right LSB to left MSB Bit15 The bit at index 15, from right LSB to left MSB Bit16 The bit at index 16, from right LSB to left MSB Bit17 The bit at index 17, from right LSB to left MSB Bit18 The bit at index 18, from right LSB to left MSB Bit19 The bit at index 19, from right LSB to left MSB Bit20 The bit at index 20, from right LSB to left MSB Bit21 The bit at index 21, from right LSB to left MSB Bit22 The bit at index 22, from right LSB to left MSB Bit23 The bit at index 23, from right LSB to left MSB Bit24 The bit at index 24, from right LSB to left MSB Bit25 The bit at index 25, from right LSB to left MSB Bit26 The bit at index 26, from right LSB to left MSB Bit27 The bit at index 27, from right LSB to left MSB Bit28 The bit at index 28, from right LSB to left MSB Bit29 The bit at index 29, from right LSB to left MSB Bit30 The bit at index 30, from right LSB to left MSB Bit31 The bit at index 31, from right LSB to left MSB None An empty bitmask Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.WaveBuilder.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.WaveBuilder.html",
    "title": "Class WaveBuilder | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class WaveBuilder Provides methods to build and render waveforms. Inheritance Object WaveBuilder Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class WaveBuilder : IDisposable Properties IsPrepared Gets a value indicating whether this wave is prepared in the DMA registers. Declaration public bool IsPrepared { get; } Property Value Type Description Boolean Pulses Gets a read-only collection of pulses. Declaration public ReadOnlyCollection<GpioPulse> Pulses { get; } Property Value Type Description ReadOnlyCollection < GpioPulse > WaveId Gets the wave identifier. Returns a negative number if the wave has not been prepared. Declaration public int WaveId { get; } Property Value Type Description Int32 Methods AddCarrierPulses(Double, Double, Double, GpioPin[]) Adds carrier pulses to the wave (useful for stuff like Infrared pulses). Declaration public void AddCarrierPulses(double frequency, double durationMicroSecs, double dutyCycle, params GpioPin[] pins) Parameters Type Name Description Double frequency The frequency. Double durationMicroSecs The duration micro secs. Double dutyCycle The duty cycle. GpioPin [] pins The pins. AddCarrierPulses(Double, Double, Double, UserGpio[]) Adds carrier pulses to the wave (useful for stuff like Infrared pulses). Declaration public void AddCarrierPulses(double frequency, double durationMicroSecs, double dutyCycle, params UserGpio[] pins) Parameters Type Name Description Double frequency The frequency. Double durationMicroSecs The duration micro secs. Double dutyCycle The duty cycle. UserGpio [] pins The pins. AddCarrierPulses(Double, Double, GpioPin[]) Adds carrier pulses to the wave (useful for stuff like Infrared pulses). Declaration public void AddCarrierPulses(double frequency, double durationMicroSecs, params GpioPin[] pins) Parameters Type Name Description Double frequency The frequency. Double durationMicroSecs The duration micro secs. GpioPin [] pins The pins. AddCarrierPulses(Double, Double, UserGpio[]) Adds carrier pulses to the wave (useful for stuff like Infrared pulses). Declaration public void AddCarrierPulses(double frequency, double durationMicroSecs, params UserGpio[] pins) Parameters Type Name Description Double frequency The frequency. Double durationMicroSecs The duration micro secs. UserGpio [] pins The pins. AddPulse(Boolean, Int32, GpioPin[]) Adds a pulse. Declaration public void AddPulse(bool value, int durationMicroSecs, params GpioPin[] pins) Parameters Type Name Description Boolean value if set to true [value]. Int32 durationMicroSecs The duration micro secs. GpioPin [] pins The pins. AddPulse(Boolean, Int32, UserGpio[]) Adds a pulse. Declaration public void AddPulse(bool value, int durationMicroSecs, params UserGpio[] pins) Parameters Type Name Description Boolean value if set to true [value]. Int32 durationMicroSecs The duration micro secs. UserGpio [] pins The pins. Exceptions Type Condition InvalidOperationException When the wave has been prepared. AddPulse(Int32, IEnumerable<GpioPin>, IEnumerable<GpioPin>) Adds a pulse. Declaration public void AddPulse(int durationMicroSecs, IEnumerable<GpioPin> onPins, IEnumerable<GpioPin> offPins) Parameters Type Name Description Int32 durationMicroSecs The duration micro secs. IEnumerable < GpioPin > onPins The on pins. IEnumerable < GpioPin > offPins The off pins. AddPulse(Int32, IEnumerable<UserGpio>, IEnumerable<UserGpio>) Adds a pulse. Declaration public void AddPulse(int durationMicroSecs, IEnumerable<UserGpio> onPins, IEnumerable<UserGpio> offPins) Parameters Type Name Description Int32 durationMicroSecs The duration micro secs. IEnumerable < UserGpio > onPins The on pins. IEnumerable < UserGpio > offPins The off pins. Exceptions Type Condition InvalidOperationException When the wave has been prepared. AddPulse(GpioPulse) Adds a pulse. Declaration public void AddPulse(GpioPulse pulse) Parameters Type Name Description GpioPulse pulse The pulse. Exceptions Type Condition InvalidOperationException When the wave has been prepared. ClearPulses() Clears all previously added pulses. Declaration public void ClearPulses() Exceptions Type Condition InvalidOperationException When the wave has been prepared. Dispose() Declaration public void Dispose() Prepare() Prepares the waveform to be rendered by DMA. Declaration public void Prepare() Exceptions Type Condition ObjectDisposedException When the wave has been disposed. Send(WaveMode) Begins rendering the waveform pulses. Do not forget to set the pin direction/mode as an output pin. The wave is automatically prepared if it has not been prepared before. Declaration public void Send(WaveMode mode) Parameters Type Name Description WaveMode mode The mode. Implements System.IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.UartPort.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.UartPort.html",
    "title": "Class UartPort | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class UartPort Provides libpigpio implementation of a UART port. Alternatively you can use the System.IO.Ports.SerialPort implementation. Inheritance Object UartPort Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class UartPort : IDisposable Properties Available Gets the number of available bytes to read in the hardware buffer. Declaration public int Available { get; } Property Value Type Description Int32 BaudRate Gets the baud rate. Declaration public int BaudRate { get; } Property Value Type Description Int32 Handle Gets the serial port handle. Declaration public UIntPtr Handle { get; } Property Value Type Description UIntPtr PortName Gets the name of the port. Declaration public string PortName { get; } Property Value Type Description String Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Read() Reads this instance. Declaration public byte[] Read() Returns Type Description Byte [] A buffer containing the bytes. Read(Int32) Reads the specified number of bytes. Declaration public byte[] Read(int count) Parameters Type Name Description Int32 count The count. Returns Type Description Byte [] A byte array of read bytes. ReadByte() Reads the byte. Declaration public byte? ReadByte() Returns Type Description Nullable < Byte > The byte value. Null if no bytes were read. Write(Byte) Writes the specified value. Declaration public void Write(byte value) Parameters Type Name Description Byte value The value. Write(Byte[]) Writes the specified buffer. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Write(Byte[], Int32) Writes the specified buffer. Declaration public void Write(byte[] buffer, int count) Parameters Type Name Description Byte [] buffer The buffer. Int32 count The count. Implements System.IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.SoftSerialPort.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.SoftSerialPort.html",
    "title": "Class SoftSerialPort | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class SoftSerialPort Provides a software based (bit-banged Serial Port). Inheritance Object SoftSerialPort Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class SoftSerialPort : IDisposable Properties BaudRate Gets the baud rate. Declaration public int BaudRate { get; } Property Value Type Description Int32 DataBits Gets the data bits. Declaration public int DataBits { get; } Property Value Type Description Int32 Handle Gets the handle. Declaration public UserGpio Handle { get; } Property Value Type Description UserGpio Invert Gets a value indicating whether the IO is inverted. Declaration public bool Invert { get; } Property Value Type Description Boolean StopBits Gets or sets the stop bits. Defaults to 2 stop bits. Declaration public int StopBits { get; set; } Property Value Type Description Int32 Methods Dispose() Declaration public void Dispose() Read(Int32) Reads up to count bytes. Declaration public byte[] Read(int count) Parameters Type Name Description Int32 count The count. Returns Type Description Byte [] The bytes that were read. Write(Byte[]) Writes the specified buffer to the transmit pin as a free-form wave. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Implements System.IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.SoftI2cBus.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.SoftI2cBus.html",
    "title": "Class SoftI2cBus | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class SoftI2cBus Provides a software based (bit-banged) I2C bus on 2 pins. Inheritance Object SoftI2cBus Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class SoftI2cBus : IDisposable Fields DefaultBaudRate The default baud rate for a software-based I2C bus Baud rate can go up to 500kbits per second. Declaration public const int DefaultBaudRate = 100000 Field Value Type Description Int32 Properties BaudRate Gets the baud rate. Declaration public int BaudRate { get; } Property Value Type Description Int32 ClockPin Gets the clock pin. Declaration public GpioPin ClockPin { get; } Property Value Type Description GpioPin DataPin Gets the data pin. Declaration public GpioPin DataPin { get; } Property Value Type Description GpioPin Handle Gets or the I2C bus handle. This points to the SDA (data) pin of the I2C bus. Declaration public UserGpio Handle { get; } Property Value Type Description UserGpio Methods Dispose() Declaration public void Dispose() Read(Byte, Int32) Reads data from the specified address. Declaration public byte[] Read(byte address, int count) Parameters Type Name Description Byte address The address. Int32 count The count. Recommended 32 as maximum. Returns Type Description Byte [] The byte array that was read. Write(Byte, Byte[]) Writes data to the specified address. Declaration public void Write(byte address, byte[] buffer) Parameters Type Name Description Byte address The address. Byte [] buffer The buffer. Recommended 32 bytes max. Implements System.IDisposable See Also IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinServoService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinServoService.html",
    "title": "Class GpioPinServoService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinServoService Provides a standard servo PWM service running at 50Hz. The pulse width must be 0, or a number beween 500 and 2500. Inheritance Object GpioPinServiceBase GpioPinServoService Inherited Members GpioPinServiceBase.IsAvailable GpioPinServiceBase.Pin GpioPinServiceBase.ValidateAvailable() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPinServoService : GpioPinServiceBase Fields PulseWidthMax The pulse width maximum in microseconds. Declaration public const int PulseWidthMax = 2500 Field Value Type Description Int32 PulseWidthMin The pulse width minimum in microseconds. Declaration public const int PulseWidthMin = 500 Field Value Type Description Int32 PulseWidthRange The pulse range difference in microseconds. Declaration public const int PulseWidthRange = 2000 Field Value Type Description Int32 Properties PositionPercent Gets or sets the pulse width as a position percent for 0.0 to 1.0. Use -1.0 to turn off the PWM pulses. Declaration public double PositionPercent { get; set; } Property Value Type Description Double PulseWidth Gets or sets the width of the pulse in microseconds. Value must be between 500 and 2500 microseconds. Setting to 0 will turn off the PWM. Declaration public int PulseWidth { get; set; } Property Value Type Description Int32 Methods ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected override bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. Overrides GpioPinServiceBase.ResolveAvailable() See Also GpioPinServiceBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.html",
    "title": "Class GpioPinServiceBase | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinServiceBase Provides a base implementation of a GPIO Pin Service. Inheritance Object GpioPinServiceBase GpioPinAlertService GpioPinClockService GpioPinInterruptService GpioPinPwmService GpioPinServoService GpioPinSoftPwmService Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public abstract class GpioPinServiceBase Constructors GpioPinServiceBase(GpioPin) Initializes a new instance of the GpioPinServiceBase class. Declaration protected GpioPinServiceBase(GpioPin pin) Parameters Type Name Description GpioPin pin The pin. Properties IsAvailable Gets a value indicating whether this service is available on the associated pin. Declaration public bool IsAvailable { get; } Property Value Type Description Boolean Pin Gets the associated pin. Declaration protected GpioPin Pin { get; } Property Value Type Description GpioPin Methods ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected abstract bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. ValidateAvailable() Validates that this service is available. Otherwise, a NotSupportedException is thrown. Declaration protected void ValidateAvailable() Exceptions Type Condition NotSupportedException Only pins marked as IsUserGpio support this service. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinPwmService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinPwmService.html",
    "title": "Class GpioPinPwmService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinPwmService Provides hardware-based PWM services on the pin. Inheritance Object GpioPinServiceBase GpioPinPwmService Inherited Members GpioPinServiceBase.IsAvailable GpioPinServiceBase.Pin GpioPinServiceBase.ValidateAvailable() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPinPwmService : GpioPinServiceBase Properties Channel Gets the PWM channel, 0 or 1. A negative number mans there is no associated PWM channel. Declaration public int Channel { get; } Property Value Type Description Int32 Frequency Gets the frequency. Declaration public int Frequency { get; } Property Value Type Description Int32 Range Gets the range of the duty cycle. Declaration public int Range { get; } Property Value Type Description Int32 Methods ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected override bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. Overrides GpioPinServiceBase.ResolveAvailable() Start(Int32, Int32) Starts PWM hardware pulses. Frequencies above 30MHz are unlikely to work. Declaration public void Start(int frequency, int dutyCycle) Parameters Type Name Description Int32 frequency The frequency. 0 (off) or 1-125000000 (125M). Int32 dutyCycle 0 (off) to 1000000 (1M)(fully on). Stop() Stops PWM hardware pulses. Declaration public void Stop() See Also GpioPinServiceBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinClockService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinClockService.html",
    "title": "Class GpioPinClockService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinClockService Provides a hardware clock services on the associated pin. Only a few pins support this. Inheritance Object GpioPinServiceBase GpioPinClockService Inherited Members GpioPinServiceBase.IsAvailable GpioPinServiceBase.Pin GpioPinServiceBase.ValidateAvailable() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPinClockService : GpioPinServiceBase Properties ClockChannel Gets the clock channel. Declaration public int ClockChannel { get; } Property Value Type Description Int32 Methods ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected override bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. Overrides GpioPinServiceBase.ResolveAvailable() Start(Int32) Starts the hardware clock on this pin. All pins sharing the clock channel and running in clock mode will get theis new frequency. The frequency must be 0 (off) or 4689-250,000,000 (250M) Hz. Declaration public void Start(int frequency) Parameters Type Name Description Int32 frequency The frequency. 0 (off) or 4689-250000000 (250M). Stop() Stops the hardware clock on this pin. Declaration public void Stop() See Also GpioPinServiceBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPin.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPin.html",
    "title": "Class GpioPin | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPin A class representing a GPIO port (pin). Inheritance Object GpioPin Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPin Properties Alerts Provides GPIO change alert services. This provides more sophisticated notification settings but it is based on sampling. Declaration public GpioPinAlertService Alerts { get; } Property Value Type Description GpioPinAlertService Clock Gets a hardware-based clock service. A clock channel spans multiple pins and therefore, clock frequency is not necessarily a per-pin setting. Declaration public GpioPinClockService Clock { get; } Property Value Type Description GpioPinClockService Direction Gets or sets the direction of the pin. Declaration public PinDirection Direction { get; set; } Property Value Type Description PinDirection The direction. Exceptions Type Condition InvalidOperationException Unable to set the pin mode to an alternative function. Interrupts Provides GPIO Interrupt Service Routine services. This is hardware-based input-only notifications. Declaration public GpioPinInterruptService Interrupts { get; } Property Value Type Description GpioPinInterruptService IsUserGpio Gets a value indicating whether this pin is a user gpio (0 to 31) and also available on the current board type. Declaration public bool IsUserGpio { get; } Property Value Type Description Boolean Mode Gets the current pin mode. Declaration public PinMode Mode { get; } Property Value Type Description PinMode PadId Gets the electrical pad this pin belongs to. Declaration public GpioPadId PadId { get; } Property Value Type Description GpioPadId PinGpio Gets the pin number as a system GPIO Identifier. Declaration public SystemGpio PinGpio { get; } Property Value Type Description SystemGpio PinNumber Gets the BCM pin identifier. Declaration public int PinNumber { get; } Property Value Type Description Int32 PullMode Gets or sets the resistor pull mode in input mode. You typically will need to set this to pull-up mode for most sensors to perform reliable reads. Declaration public GpioPullMode PullMode { get; set; } Property Value Type Description GpioPullMode Pwm Gets the hardware-based PWM services associated to the pin. Hardware PWM groups several pins by their PWM channel. Declaration public GpioPinPwmService Pwm { get; } Property Value Type Description GpioPinPwmService Servo Gets the servo pin service. This is a standard 50Hz PWM servo that operates in pulse widths between 500 and 2500 microseconds. Use the PWM service instead if you wish further flexibility. Declaration public GpioPinServoService Servo { get; } Property Value Type Description GpioPinServoService SoftPwm Provides a sfotware based PWM pulse generator. This and the servo functionality use the DMA and PWM or PCM peripherals to control and schedule the pulse lengths and dutycycles. Using hardware based PWM is preferred. Declaration public GpioPinSoftPwmService SoftPwm { get; } Property Value Type Description GpioPinSoftPwmService Value Gets or sets the digital value of the pin. This call actively reads or writes the pin. Declaration public bool Value { get; set; } Property Value Type Description Boolean Methods Pulsate(Int32, Boolean) Pulsates the pin for the specified micro seconds. The value is the start value of the pulse. Declaration public void Pulsate(int microSecs, bool value) Parameters Type Name Description Int32 microSecs The micro secs. Boolean value if set to true [value]. Read() The fastest way to read from the pin. No error checking is performed. Declaration public int Read() Returns Type Description Int32 Returns a 0 or a 1 for success. A negative number for error. Write(Int32) The fastest way to write to the pin. Anything non-zero is a high. No error checking is performed. Declaration public ResultCode Write(int value) Parameters Type Name Description Int32 value The value. Returns Type Description ResultCode The result code. 0 (OK) for success. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPad.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPad.html",
    "title": "Class GpioPad | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPad Represents an electrical pad which groups GPIO pins and has configurable electrical drive strength. Inheritance Object GpioPad Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPad Properties Pad Gets electrical pad object. Declaration public GpioPad Pad { get; } Property Value Type Description GpioPad PadId Gets the electrical pad identifier. Declaration public GpioPadId PadId { get; } Property Value Type Description GpioPadId PadStrength Gets or sets the electrical pad strength. Declaration public GpioPadStrength PadStrength { get; set; } Property Value Type Description GpioPadStrength Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.BoardWaveService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.BoardWaveService.html",
    "title": "Class BoardWaveService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class BoardWaveService Provides a a pin service to generate pulses with microsecond precision. Inheritance Object BoardWaveService Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class BoardWaveService Properties CurrentWaveId Gets the current wave identifier. Declaration public int CurrentWaveId { get; } Property Value Type Description Int32 IsBusy Gets a value indicating whether a waveform is being transmitted. Declaration public bool IsBusy { get; } Property Value Type Description Boolean MaxDmaControlBlocks Gets the maximum DMA control blocks per wave. Declaration public int MaxDmaControlBlocks { get; } Property Value Type Description Int32 MaxDurationMicroSecs Gets the maximum duration of a wave in micro seconds. Declaration public int MaxDurationMicroSecs { get; } Property Value Type Description Int32 MaxPulses Gets the maximum pulses allowable per wave. Declaration public int MaxPulses { get; } Property Value Type Description Int32 Methods CreateWave() Creates the wave. Declaration public WaveBuilder CreateWave() Returns Type Description WaveBuilder A wave builder object to create and transmit PWM waves. StopCurrent() Stops the current wave being transmitted. This is intended to stop waves that are generated with a cycling mode. Declaration public void StopCurrent() See Also GpioPinServiceBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.Threading.html": {
    "href": "api/Unosquare.PiGpio.Threading.html",
    "title": "Class Threading | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Threading Use this class to access threading methods using interop. Inheritance Object Threading Namespace : Unosquare.PiGpio Syntax public class Threading : IThreading Methods StartThread(Action) Declaration public void StartThread(Action worker) Parameters Type Name Description Action worker StartThreadEx(Action<UIntPtr>, UIntPtr) Declaration public UIntPtr StartThreadEx(Action<UIntPtr> worker, UIntPtr userData) Parameters Type Name Description Action < UIntPtr > worker UIntPtr userData Returns Type Description UIntPtr StopThread() Stops a thread that was previously started with StartThread(Action) . Declaration public void StopThread() StopThreadEx(UIntPtr) Declaration public void StopThreadEx(UIntPtr handle) Parameters Type Name Description UIntPtr handle Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.SystemInfo.html": {
    "href": "api/Unosquare.PiGpio.SystemInfo.html",
    "title": "Class SystemInfo | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class SystemInfo Represents the system info. Inheritance Object SystemInfo Namespace : Unosquare.PiGpio Syntax public class SystemInfo : ISystemInfo Properties BoardRevision Declaration public BoardRevision BoardRevision { get; } Property Value Type Description BoardRevision BoardType Gets the type of the board. See the BoardType enumeration. Declaration public static BoardType BoardType { get; } Property Value Type Description BoardType HardwareRevision Gets the hardware revision number. Declaration public static long HardwareRevision { get; } Property Value Type Description Int64 LibraryVersion Declaration public Version LibraryVersion { get; } Property Value Type Description Version Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.SpiBus.html": {
    "href": "api/Unosquare.PiGpio.SpiBus.html",
    "title": "Class SpiBus | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class SpiBus The SPI Bus containing the 2 SPI channels. Inheritance Object SpiBus Namespace : Unosquare.PiGpio Syntax public class SpiBus : ISpiBus Properties Channel0 Declaration public ISpiChannel Channel0 { get; } Property Value Type Description ISpiChannel Channel0Frequency Declaration public int Channel0Frequency { get; set; } Property Value Type Description Int32 Channel1 Declaration public ISpiChannel Channel1 { get; } Property Value Type Description ISpiChannel Channel1Frequency Declaration public int Channel1Frequency { get; set; } Property Value Type Description Int32 DefaultFrequency Declaration public int DefaultFrequency { get; } Property Value Type Description Int32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.html",
    "title": "Namespace Unosquare.PiGpio.NativeTypes | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Namespace Unosquare.PiGpio.NativeTypes Classes BscTransfer A data structure representing a BSC transfer. GpioSample Represents sGPIO ample data. I2CMessageSegment An I2C Message Segment. RawCBS The Raw CBS (Linux Control Block). RawSpiData Represents Raw SPI channel data. RawWave Represents raw waveform data. RawWaveInformation Represents raw waveform information. Structs GpioPulse A pulse representing microseconds in the high position, microseconds in the low position, and a delay measure. Delegates PiGpioAlertDelegate Defines a signature for alert callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike Interrupts, alerts are generated by continuously sampling the value of the pin. PiGpioAlertExDelegate Defines a signature for alert callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike Interrupts, alerts are generated by continuously sampling the value of the pin. PiGpioEventDelegate Callback for when an pigpio library event firing. This represents an event model internal to the pigpio library. Use the buil-in EventHandler CLR constructs instead. PiGpioEventExDelegate Callback for when an pigpio library event firing. This represents an event model internal to the pigpio library. Use the buil-in EventHandler CLR constructs instead. PiGpioGetSamplesDelegate Bulk pin sampling delegate. Not used in the managed model of this library. PiGpioGetSamplesExDelegate Bulk pin sampling delegate. Not used in the managed model of this library. PiGpioIsrDelegate Defines a signature for ISR callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike alerts, interrupts are generated with level changes. Make sure you hookup pull-down/pull-up resitors for interrupts to work as they depend on current flowing through the pin in order to fire consistently. PiGpioIsrExDelegate Defines a signature for ISR callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike alerts, interrupts are generated with level changes. Make sure you hookup pull-down/pull-up resitors for interrupts to work as they depend on current flowing through the pin in order to fire consistently. PiGpioSignalDelegate Defines a callback to be executed when the OS sends a signal. PiGpioSignalExDelegate Defines a callback to be executed when the OS sends a signal. PiGpioThreadDelegate Defines a signature for a pthread worker. Use built-in CLR Thread instead. PiGpioTimerDelegate Defines a callback for a pigpio library timer Use built-in CLR Timer instead. PiGpioTimerExDelegate Defines a callback for a pigpio library timer Use built-in CLR Timer instead. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioTimerExDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioTimerExDelegate.html",
    "title": "Delegate PiGpioTimerExDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioTimerExDelegate Defines a callback for a pigpio library timer Use built-in CLR Timer instead. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioTimerExDelegate(UIntPtr userData); Parameters Type Name Description UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioTimerDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioTimerDelegate.html",
    "title": "Delegate PiGpioTimerDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioTimerDelegate Defines a callback for a pigpio library timer Use built-in CLR Timer instead. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioTimerDelegate(); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioThreadDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioThreadDelegate.html",
    "title": "Delegate PiGpioThreadDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioThreadDelegate Defines a signature for a pthread worker. Use built-in CLR Thread instead. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioThreadDelegate(UIntPtr userData); Parameters Type Name Description UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioSignalExDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioSignalExDelegate.html",
    "title": "Delegate PiGpioSignalExDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioSignalExDelegate Defines a callback to be executed when the OS sends a signal. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioSignalExDelegate(int signalNumber, UIntPtr userData); Parameters Type Name Description Int32 signalNumber The OS signal number. UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate.html",
    "title": "Delegate PiGpioGetSamplesDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioGetSamplesDelegate Bulk pin sampling delegate. Not used in the managed model of this library. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioGetSamplesDelegate(GpioSample[] samples, int numSamples); Parameters Type Name Description GpioSample [] samples The samples. Int32 numSamples The number samples. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioEventExDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioEventExDelegate.html",
    "title": "Delegate PiGpioEventExDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioEventExDelegate Callback for when an pigpio library event firing. This represents an event model internal to the pigpio library. Use the buil-in EventHandler CLR constructs instead. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioEventExDelegate(int eventId, uint tick, UIntPtr userData); Parameters Type Name Description Int32 eventId The event identifier. UInt32 tick The tick. UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioEventDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioEventDelegate.html",
    "title": "Delegate PiGpioEventDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioEventDelegate Callback for when an pigpio library event firing. This represents an event model internal to the pigpio library. Use the buil-in EventHandler CLR constructs instead. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioEventDelegate(int eventId, uint timeMicrosecs); Parameters Type Name Description Int32 eventId The event identifier. UInt32 timeMicrosecs The time microsecs. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.I2cDevice.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.I2cDevice.html",
    "title": "Class I2cDevice | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class I2cDevice Represents a peripheral connected via the I2C/SM bus. Inheritance Object I2cDevice Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class I2cDevice : IDisposable Properties Address Gets the devide address on the bus. Declaration public byte Address { get; } Property Value Type Description Byte BusId Gets the bus identifier. Declaration public I2cBusId BusId { get; } Property Value Type Description I2cBusId Handle Gets the device handle. Declaration public UIntPtr Handle { get; } Property Value Type Description UIntPtr UseCombinedTransactions This sets the I2C (i2c-bcm2708) module \"use combined transactions\" parameter on or off. NOTE: when the flag is on a write followed by a read to the same slave address will use a repeated start (rather than a stop/start). Declaration public static bool UseCombinedTransactions { set; } Property Value Type Description Boolean Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() ReadBlock(Byte) This reads a block of up to 32 bytes from the specified register of the device associated with handle. The amount of returned data is set by the device. Declaration public byte[] ReadBlock(byte register) Parameters Type Name Description Byte register The register. Returns Type Description Byte [] The data read from the device. ReadBlock(Byte, Int32) This reads count bytes from the specified register of the device associated with handle . The count may be 1-32. Declaration public byte[] ReadBlock(byte register, int count) Parameters Type Name Description Byte register The register. Int32 count The count. Returns Type Description Byte [] The data read from the device. ReadByte() This reads a single byte from the device associated with handle. Declaration public byte ReadByte() Returns Type Description Byte The value read. ReadByte(Byte) This reads a single byte from the specified register of the device associated with handle. Declaration public byte ReadByte(byte register) Parameters Type Name Description Byte register The register. Returns Type Description Byte The read value. ReadRaw(Int32) This reads count bytes from the raw device into buf. Declaration public byte[] ReadRaw(int count) Parameters Type Name Description Int32 count The count. Returns Type Description Byte [] The raw byte data. ReadWord(Byte) This reads a single 16 bit word from the specified register of the device associated with handle. Declaration public ushort ReadWord(byte register) Parameters Type Name Description Byte register The register. Returns Type Description UInt16 The word data. SetMode(I2cQuickMode) This sends a single bit (in the Rd/Wr bit) to the device associated with handle. Declaration public void SetMode(I2cQuickMode mode) Parameters Type Name Description I2cQuickMode mode The mode (write is 0, read is 1). Transfer(Byte, Byte[]) This writes data bytes to the specified register of the device associated with handle and reads a device specified number of bytes of data in return. The SMBus 2.0 documentation states that a minimum of 1 byte may be sent and a minimum of 1 byte may be received. The total number of bytes sent/received must be 32 or less. Declaration public byte[] Transfer(byte register, byte[] buffer) Parameters Type Name Description Byte register The register. Byte [] buffer The buffer. Returns Type Description Byte [] The bytes that were read. Write(Byte) This sends a single byte to the device associated with handle. Declaration public void Write(byte value) Parameters Type Name Description Byte value The value. Write(Byte, Byte) This writes a single byte to the specified register of the device associated with handle. Declaration public void Write(byte register, byte value) Parameters Type Name Description Byte register The register. Byte value The value. Write(Byte, Byte[]) This writes up to 32 bytes to the specified register of the device associated with handle. Declaration public void Write(byte register, byte[] buffer) Parameters Type Name Description Byte register The register. Byte [] buffer The buffer. Write(Byte, Byte[], Int32) This writes 1 to 32 bytes to the specified register of the device associated with handle. Declaration public void Write(byte register, byte[] buffer, int count) Parameters Type Name Description Byte register The register. Byte [] buffer The buffer. Int32 count The count. Write(Byte, Int16) This writes a single 16 bit word to the specified register of the device associated with handle. Declaration public void Write(byte register, short value) Parameters Type Name Description Byte register The register. Int16 value The value. Write(Byte, UInt16) This writes a single 16 bit word to the specified register of the device associated with handle. Declaration public void Write(byte register, ushort value) Parameters Type Name Description Byte register The register. UInt16 value The value. Write(Byte[]) This writes a sequence of bytes without control bits between blocks. This operation sends the bytes in its raw form consecutively. Declaration public void Write(byte[] buffer) Parameters Type Name Description Byte [] buffer The buffer. Implements System.IDisposable See Also IDisposable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.html",
    "title": "Class GpioPinSoftPwmService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinSoftPwmService Provides a software-based PWM service on the associated pin. Inheritance Object GpioPinServiceBase GpioPinSoftPwmService Inherited Members GpioPinServiceBase.IsAvailable GpioPinServiceBase.Pin GpioPinServiceBase.ValidateAvailable() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public class GpioPinSoftPwmService : GpioPinServiceBase Properties DutyCycle Gets or sets the duty cycle. Setting this property starts the PWM pulses. The default range is 255. Declaration public int DutyCycle { get; set; } Property Value Type Description Int32 Frequency Gets or sets the frequency (in Hz) at which the PWM runs. Declaration public int Frequency { get; set; } Property Value Type Description Int32 Range Gets or sets the range of the duty cycle. Declaration public int Range { get; set; } Property Value Type Description Int32 Methods ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected override bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. Overrides GpioPinServiceBase.ResolveAvailable() See Also GpioPinServiceBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.html",
    "title": "Class GpioPinInterruptService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinInterruptService Provides Interrupt Service Routine callback services on the GPIO pin. Inheritance Object GpioPinServiceBase GpioPinInterruptService Inherited Members GpioPinServiceBase.IsAvailable GpioPinServiceBase.Pin GpioPinServiceBase.ValidateAvailable() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPinInterruptService : GpioPinServiceBase Properties EdgeDetection Gets or sets the edge detection strategy. Declaration public EdgeDetection EdgeDetection { get; set; } Property Value Type Description EdgeDetection Exceptions Type Condition InvalidOperationException EdgeDetection cannot be set when callbacks have started. TimeoutMilliseconds Gets or sets the ISR timeout milliseconds. When no changes are detected for this amount of time, the callback returns with a no level change. Declaration public int TimeoutMilliseconds { get; set; } Property Value Type Description Int32 The timeout in milliseconds. Methods ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected override bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. Overrides GpioPinServiceBase.ResolveAvailable() Start(PiGpioIsrDelegate) Starts the hardware ISR callbacks. Declaration public void Start(PiGpioIsrDelegate callback) Parameters Type Name Description PiGpioIsrDelegate callback The callback. Exceptions Type Condition NotSupportedException IsUserGpio is false. ArgumentNullException callback - ClearAlertCallback. ArgumentException A callback is already registered. Clear the current callback before registering a new one. - callback. Start(PiGpioIsrDelegate, EdgeDetection, Int32) Starts the hardware ISR callbacks. Declaration public void Start(PiGpioIsrDelegate callback, EdgeDetection edgeDetection, int timeoutMilliseconds) Parameters Type Name Description PiGpioIsrDelegate callback The callback. EdgeDetection edgeDetection The edge detection. Int32 timeoutMilliseconds The timeout milliseconds. Exceptions Type Condition ArgumentNullException callback - Use Stop first. ArgumentException A callback is already registered. Clear the current callback before registering a new one. - callback. Stop() Stops the hardware ISR callbacks. Declaration public void Stop() See Also GpioPinServiceBase Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinCollection.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinCollection.html",
    "title": "Class GpioPinCollection | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinCollection Represents a dictionary of all GPIO Pins. Inheritance Object ReadOnlyDictionary < Int32 , GpioPin > GpioPinCollection Implements IDictionary < Int32 , GpioPin > ICollection < KeyValuePair < Int32 , GpioPin >> IDictionary ICollection IReadOnlyDictionary < Int32 , GpioPin > IReadOnlyCollection < KeyValuePair < Int32 , GpioPin >> IEnumerable < KeyValuePair < Int32 , GpioPin >> IEnumerable Inherited Members ReadOnlyDictionary<Int32, GpioPin>.ContainsKey(Int32) ReadOnlyDictionary<Int32, GpioPin>.TryGetValue(Int32, GpioPin) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Add(System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Remove(System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.get_Item(System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.set_Item(System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>>.Contains(System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>>.CopyTo(System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>>.Add(System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>>.Remove(System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>) ReadOnlyDictionary<Int32, GpioPin>.GetEnumerator() ReadOnlyDictionary<Int32, GpioPin>.IEnumerable.GetEnumerator() ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Add(Object, Object) ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Clear() ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Contains(Object) ReadOnlyDictionary<Int32, GpioPin>.IDictionary.GetEnumerator() ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Remove(Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<Int32, GpioPin>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<Int32, GpioPin>.Dictionary ReadOnlyDictionary<Int32, GpioPin>.Keys ReadOnlyDictionary<Int32, GpioPin>.Values System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Values ReadOnlyDictionary<Int32, GpioPin>.Item[Int32] System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Item[System.Int32] ReadOnlyDictionary<Int32, GpioPin>.Count System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>>.IsReadOnly ReadOnlyDictionary<Int32, GpioPin>.IDictionary.IsFixedSize ReadOnlyDictionary<Int32, GpioPin>.IDictionary.IsReadOnly ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Keys ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Values ReadOnlyDictionary<Int32, GpioPin>.IDictionary.Item[Object] ReadOnlyDictionary<Int32, GpioPin>.ICollection.IsSynchronized ReadOnlyDictionary<Int32, GpioPin>.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.System.Collections.Generic.IReadOnlyDictionary<System.Int32, Unosquare.PiGpio.ManagedModel.GpioPin>.Values Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPinCollection : ReadOnlyDictionary<int, GpioPin>, IDictionary<int, GpioPin>, ICollection<KeyValuePair<int, GpioPin>>, IDictionary, ICollection, IReadOnlyDictionary<int, GpioPin>, IReadOnlyCollection<KeyValuePair<int, GpioPin>>, IEnumerable<KeyValuePair<int, GpioPin>>, IEnumerable Properties Item[SystemGpio] Gets the GpioPin with the specified gpio. Declaration public GpioPin this[SystemGpio gpio] { get; } Parameters Type Name Description SystemGpio gpio The gpio. Property Value Type Description GpioPin The GpioPin . Item[UserGpio] Gets the GpioPin with the specified gpio. Declaration public GpioPin this[UserGpio gpio] { get; } Parameters Type Name Description UserGpio gpio The gpio. Property Value Type Description GpioPin The GpioPin . Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPinAlertService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPinAlertService.html",
    "title": "Class GpioPinAlertService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPinAlertService Provides GPIO pin functionality to report on alerts based on sampling of 5 microseconds approximately. Inheritance Object GpioPinServiceBase GpioPinAlertService Inherited Members GpioPinServiceBase.IsAvailable GpioPinServiceBase.Pin GpioPinServiceBase.ValidateAvailable() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPinAlertService : GpioPinServiceBase Properties GlitchFilterSteadyMicros Gets the glitch filter steady microseconds. Use ApplyGlitchFilter(Int32) to set. Declaration public int GlitchFilterSteadyMicros { get; } Property Value Type Description Int32 NoiseFilterActiveMicros Gets the noise filter active microseconds. Use ApplyNoiseFilter(Int32, Int32) to set. Declaration public int NoiseFilterActiveMicros { get; } Property Value Type Description Int32 NoiseFilterSteadyMicros Gets the noise filter steady microseconds. Use ApplyNoiseFilter(Int32, Int32) to set. Declaration public int NoiseFilterSteadyMicros { get; } Property Value Type Description Int32 TimeoutMilliseconds Gets or sets the watchdog timeout milliseconds. When no changes are detected for this amount of time, the callback returns with a no level change. Declaration public int TimeoutMilliseconds { get; set; } Property Value Type Description Int32 The timeout in milliseconds. Methods ApplyGlitchFilter(Int32) Applies a glitch filter to alert triggering. Prevents reporting signals that are not steady for at least the given number of microseconds. Declaration public void ApplyGlitchFilter(int steadyMicroseconds) Parameters Type Name Description Int32 steadyMicroseconds The steady microseconds. ApplyNoiseFilter(Int32, Int32) Applies a noise filter to alert triggering. Level changes on the GPIO are ignored until a level which has been stable for steadyMicroseconds microseconds is detected. Level changes on the GPIO are then reported for activeMicroseconds microseconds after which the process repeats. Declaration public void ApplyNoiseFilter(int steadyMicroseconds, int activeMicroseconds) Parameters Type Name Description Int32 steadyMicroseconds The steady microseconds. Int32 activeMicroseconds The active microseconds. ResetGlitchFilter() Resets the glitch filter. Declaration public void ResetGlitchFilter() ResetNoiseFilter() Resets the noise filter. Declaration public void ResetNoiseFilter() ResolveAvailable() Resolves the availability of this service for the associated pin. Declaration protected override bool ResolveAvailable() Returns Type Description Boolean True when the service is deemed as available. Overrides GpioPinServiceBase.ResolveAvailable() Start(PiGpioAlertDelegate) Start the alert callbacks. Declaration public void Start(PiGpioAlertDelegate callback) Parameters Type Name Description PiGpioAlertDelegate callback The callback. Exceptions Type Condition NotSupportedException IsUserGpio is false. ArgumentNullException callback - ClearAlertCallback. ArgumentException A callback is already registered. Clear the current callback before registering a new one. - callback. Stop() Clears the alert callback and stops reporting changes. Declaration public void Stop() Exceptions Type Condition NotSupportedException IsUserGpio is false. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioPadCollection.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioPadCollection.html",
    "title": "Class GpioPadCollection | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioPadCollection A collection of GPIO electrical pads. Inheritance Object ReadOnlyDictionary < GpioPadId , GpioPad > GpioPadCollection Implements IDictionary < GpioPadId , GpioPad > ICollection < KeyValuePair < GpioPadId , GpioPad >> IDictionary ICollection IReadOnlyDictionary < GpioPadId , GpioPad > IReadOnlyCollection < KeyValuePair < GpioPadId , GpioPad >> IEnumerable < KeyValuePair < GpioPadId , GpioPad >> IEnumerable Inherited Members ReadOnlyDictionary<GpioPadId, GpioPad>.ContainsKey(GpioPadId) ReadOnlyDictionary<GpioPadId, GpioPad>.TryGetValue(GpioPadId, GpioPad) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Add(Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Remove(Unosquare.PiGpio.NativeEnums.GpioPadId) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.get_Item(Unosquare.PiGpio.NativeEnums.GpioPadId) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.set_Item(Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>>.Contains(System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>>.CopyTo(System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>[], System.Int32) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>>.Add(System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>>.Clear() System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>>.Remove(System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>) ReadOnlyDictionary<GpioPadId, GpioPad>.GetEnumerator() ReadOnlyDictionary<GpioPadId, GpioPad>.IEnumerable.GetEnumerator() ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Add(Object, Object) ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Clear() ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Contains(Object) ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.GetEnumerator() ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Remove(Object) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.IDictionary.get_Item(System.Object) System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.IDictionary.set_Item(System.Object, System.Object) ReadOnlyDictionary<GpioPadId, GpioPad>.ICollection.CopyTo(Array, Int32) ReadOnlyDictionary<GpioPadId, GpioPad>.Dictionary ReadOnlyDictionary<GpioPadId, GpioPad>.Keys ReadOnlyDictionary<GpioPadId, GpioPad>.Values System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Values ReadOnlyDictionary<GpioPadId, GpioPad>.Item[GpioPadId] System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Item[Unosquare.PiGpio.NativeEnums.GpioPadId] ReadOnlyDictionary<GpioPadId, GpioPad>.Count System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>>.IsReadOnly ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.IsFixedSize ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.IsReadOnly ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Keys ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Values ReadOnlyDictionary<GpioPadId, GpioPad>.IDictionary.Item[Object] ReadOnlyDictionary<GpioPadId, GpioPad>.ICollection.IsSynchronized ReadOnlyDictionary<GpioPadId, GpioPad>.ICollection.SyncRoot System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Keys System.Collections.ObjectModel.ReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.System.Collections.Generic.IReadOnlyDictionary<Unosquare.PiGpio.NativeEnums.GpioPadId, Unosquare.PiGpio.ManagedModel.GpioPad>.Values Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioPadCollection : ReadOnlyDictionary<GpioPadId, GpioPad>, IDictionary<GpioPadId, GpioPad>, ICollection<KeyValuePair<GpioPadId, GpioPad>>, IDictionary, ICollection, IReadOnlyDictionary<GpioPadId, GpioPad>, IReadOnlyCollection<KeyValuePair<GpioPadId, GpioPad>>, IEnumerable<KeyValuePair<GpioPadId, GpioPad>>, IEnumerable Implements System.Collections.Generic.IDictionary<TKey,TValue> System.Collections.Generic.ICollection<T> System.Collections.IDictionary System.Collections.ICollection System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.GpioBank.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.GpioBank.html",
    "title": "Class GpioBank | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioBank Provides access to bulk GPIO read and write operations. Inheritance Object GpioBank Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.ManagedModel Syntax public sealed class GpioBank Properties BankNumber Gets the bank number; 1 or 2. Declaration public int BankNumber { get; } Property Value Type Description Int32 GpioCount Gets the number of gpio pins for this bank. Declaration public int GpioCount { get; } Property Value Type Description Int32 MaxGpioIndex Gets the maximum index of the gpio bank. Declaration public int MaxGpioIndex { get; } Property Value Type Description Int32 MinGpioIndex Gets the minimum index of the gpio bank. Declaration public int MinGpioIndex { get; } Property Value Type Description Int32 Methods ClearBits(BitMask) Clears the bits according to the bit mask. For bank 1, the starting index is GPIO 00. For bank 2, the starting index is GPIO 32. This means that for bank 2, bit 33 is addressed as Bit01 in the bit mask. Declaration public void ClearBits(BitMask bitMask) Parameters Type Name Description BitMask bitMask The bit mask. ReadBinLiteral() Reads from the bank and returns a series of 0s and 1s from MSB to LSB. Please note the output of the Bit Array is reversed so that the MSB is the first character. Declaration public string ReadBinLiteral() Returns Type Description String A string containing 0s and 1s. ReadBits() Reads the value of all the GPIO pins at once, where the 0th index of the array is the lowest pin index (LSB) and the 31st index of the array is the highes pin index (MSB). Declaration public BitArray ReadBits() Returns Type Description BitArray The bits read. ReadBytes() Reads the value of all the GPIO pins at once as an array of 4 bytes. The 0th index of the result is the Least Significant Byte (low index pins pins). The 3rd index of the result is the Most Significant Byte (high index pins). Declaration public byte[] ReadBytes() Returns Type Description Byte [] The bytes that were read. ReadHexLiteral() Reads from the bank and returns a series of hexadecimal chars from MSB to LSB. Please note the output of the byte array is reversed so that the left-most characters are the MSB. Declaration public string ReadHexLiteral() Returns Type Description String A string containing the hexadecimal chars. ReadValue() Reads the value of all the GPIO pins at once as an unsigned, 32-bit integer. Declaration public uint ReadValue() Returns Type Description UInt32 The current value of all pins. SetBits(BitMask) Sets the bits according to the bit mask. For bank 1, the starting index is GPIO 00. For bank 2, the starting index is GPIO 32. This means that for bank 2, bit 33 is addressed as Bit01 in the bit mask. Declaration public void SetBits(BitMask bitMask) Parameters Type Name Description BitMask bitMask The bit mask. ToBinLiteral(BitArray) Returns a series of 0s and 1s from MSB to LSB. Please note the output of the Bit Array is reversed. Declaration public static string ToBinLiteral(BitArray bits) Parameters Type Name Description BitArray bits The bits. Returns Type Description String A string containing 0s and 1s. ToHexLiteral(Byte[]) Returns a series of hexadecimal chars from MSB to LSB. Please note the output of the byte array is reversed. Declaration public static string ToHexLiteral(byte[] bytes) Parameters Type Name Description Byte [] bytes The bytes. Returns Type Description String A string containing the hexadecimal chars. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.ManagedModel.BoardTimingService.html": {
    "href": "api/Unosquare.PiGpio.ManagedModel.BoardTimingService.html",
    "title": "Class BoardTimingService | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class BoardTimingService Provides timing, date and delay functions. Also provides access to registered timers. Inheritance Object BoardTimingService Namespace : Unosquare.PiGpio.ManagedModel Syntax public class BoardTimingService : ITiming Properties Epoch Gets the Linux Epoch (Jan 1, 1970) in UTC. Declaration public DateTime Epoch { get; } Property Value Type Description DateTime Microseconds Declaration public uint Microseconds { get; } Property Value Type Description UInt32 Milliseconds Declaration public uint Milliseconds { get; } Property Value Type Description UInt32 Timestamp Gets the elapsed time since the Epoc (Jan 1, 1970). Declaration public TimeSpan Timestamp { get; } Property Value Type Description TimeSpan TimestampMicroseconds Gets a timestamp since Jan 1, 1970 in microseconds. Declaration public long TimestampMicroseconds { get; } Property Value Type Description Int64 TimestampSeconds Gets the number of seconds elapsed since the Epoc (Jan 1, 1970). Declaration public double TimestampSeconds { get; } Property Value Type Description Double TimestampTick Gets the timestamp tick. Useful to calculate offsets in Alerts or ISR callbacks. Declaration public uint TimestampTick { get; } Property Value Type Description UInt32 Methods Sleep(Int64) Sleeps for the specified milliseconds. Declaration public void Sleep(long millis) Parameters Type Name Description Int64 millis The milliseconds to sleep for. Sleep(TimeSpan) Sleeps for the specified time span. Declaration public void Sleep(TimeSpan timeSpan) Parameters Type Name Description TimeSpan timeSpan The time span to sleep for. SleepMicros(Int64) Sleeps for the given amount of microseconds. Waits of 100 microseconds or less use busy waits. Returns the real elapsed microseconds. Declaration public long SleepMicros(long microsecs) Parameters Type Name Description Int64 microsecs The micro seconds. Returns Type Description Int64 Returns the real elapsed microseconds. SleepMicroseconds(UInt32) Declaration public void SleepMicroseconds(uint micros) Parameters Type Name Description UInt32 micros SleepMilliseconds(UInt32) Declaration public void SleepMilliseconds(uint millis) Parameters Type Name Description UInt32 millis StartThread(Action) Shortcut method to start a thread. It runs the thread automatically. Declaration public Thread StartThread(Action doWork) Parameters Type Name Description Action doWork The do work. Returns Type Description Thread A reference to the thread object. StartThread(Action, String) Shortcut method to start a thread. It runs the thread automatically. Declaration public Thread StartThread(Action doWork, string threadName) Parameters Type Name Description Action doWork The do work. String threadName Name of the thread. Returns Type Description Thread A reference to the thread object. StartTimer(Int32, Action) Starts a timer that executes a block of code with the given period. Declaration public Timer StartTimer(int periodMilliseconds, Action callback) Parameters Type Name Description Int32 periodMilliseconds The period in milliseconds. Action callback The callback. Returns Type Description Timer A reference to a timer. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.I2CBus.html": {
    "href": "api/Unosquare.PiGpio.I2CBus.html",
    "title": "Class I2CBus | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class I2CBus A simple wrapper for the I2c bus on the Raspberry Pi. Inheritance Object I2CBus Namespace : Unosquare.PiGpio Syntax public class I2CBus : II2CBus Properties Devices Declaration public ReadOnlyCollection<II2CDevice> Devices { get; } Property Value Type Description ReadOnlyCollection < II2CDevice > Item[Int32] Declaration public II2CDevice this[int deviceId] { get; } Parameters Type Name Description Int32 deviceId Property Value Type Description II2CDevice Methods AddDevice(Int32) Declaration public II2CDevice AddDevice(int deviceId) Parameters Type Name Description Int32 deviceId Returns Type Description II2CDevice GetDeviceById(Int32) Declaration public II2CDevice GetDeviceById(int deviceId) Parameters Type Name Description Int32 deviceId Returns Type Description II2CDevice Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.GpioController.html": {
    "href": "api/Unosquare.PiGpio.GpioController.html",
    "title": "Class GpioController | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioController Represents the Raspberry Pi GPIO controller as an IReadOnlyCollection of GpioPins Low level operations are accomplished by using the PiGPIO library. Inheritance Object GpioController Namespace : Unosquare.PiGpio Syntax public class GpioController : IGpioController Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Item[BcmPin] Declaration public IGpioPin this[BcmPin bcmPin] { get; } Parameters Type Name Description BcmPin bcmPin Property Value Type Description IGpioPin Item[P1] Declaration public IGpioPin this[P1 pinNumber] { get; } Parameters Type Name Description P1 pinNumber Property Value Type Description IGpioPin Item[P5] Declaration public IGpioPin this[P5 pinNumber] { get; } Parameters Type Name Description P5 pinNumber Property Value Type Description IGpioPin Item[Int32] Declaration public IGpioPin this[int bcmPinNumber] { get; } Parameters Type Name Description Int32 bcmPinNumber Property Value Type Description IGpioPin Methods GetEnumerator() Declaration public IEnumerator<IGpioPin> GetEnumerator() Returns Type Description IEnumerator < IGpioPin > Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.BootstrapPiGpio.html": {
    "href": "api/Unosquare.PiGpio.BootstrapPiGpio.html",
    "title": "Class BootstrapPiGpio | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class BootstrapPiGpio Represents the bootstrap process to use PiGPio. Inheritance Object BootstrapPiGpio Namespace : Unosquare.PiGpio Syntax public class BootstrapPiGpio : IBootstrap Methods Bootstrap() Declaration public void Bootstrap() Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.html": {
    "href": "api/Unosquare.PiGpio.html",
    "title": "Namespace Unosquare.PiGpio | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Namespace Unosquare.PiGpio Classes Board Represents the Raspberry Pi Board and provides access to all GPIO initialization and functionality. BoardException Represents a PiGpio Library call exception. BootstrapPiGpio Represents the bootstrap process to use PiGPio. GpioController Represents the Raspberry Pi GPIO controller as an IReadOnlyCollection of GpioPins Low level operations are accomplished by using the PiGPIO library. I2CBus A simple wrapper for the I2c bus on the Raspberry Pi. SpiBus The SPI Bus containing the 2 SPI channels. SystemInfo Represents the system info. Threading Use this class to access threading methods using interop. Timing Represents a class with Timing related methods. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.Timing.html": {
    "href": "api/Unosquare.PiGpio.Timing.html",
    "title": "Class Timing | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Timing Represents a class with Timing related methods. Inheritance Object Timing Namespace : Unosquare.PiGpio Syntax public class Timing : ITiming Properties Microseconds Declaration public uint Microseconds { get; } Property Value Type Description UInt32 Milliseconds Declaration public uint Milliseconds { get; } Property Value Type Description UInt32 Methods SleepMicroseconds(UInt32) Declaration public void SleepMicroseconds(uint micros) Parameters Type Name Description UInt32 micros SleepMilliseconds(UInt32) Declaration public void SleepMilliseconds(uint millis) Parameters Type Name Description UInt32 millis Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.RawWaveInformation.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.RawWaveInformation.html",
    "title": "Class RawWaveInformation | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class RawWaveInformation Represents raw waveform information. Inheritance Object RawWaveInformation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public class RawWaveInformation Properties BottomCB first CB used by wave. Declaration public ushort BottomCB { get; set; } Property Value Type Description UInt16 BottomOOL last OOL used by wave. Declaration public ushort BottomOOL { get; set; } Property Value Type Description UInt16 Deleted Gets or sets the deleted. Declaration public ushort Deleted { get; set; } Property Value Type Description UInt16 NumberBOOL Gets or sets the number bool. Declaration public ushort NumberBOOL { get; set; } Property Value Type Description UInt16 NumberCB Gets or sets the number cb. Declaration public ushort NumberCB { get; set; } Property Value Type Description UInt16 NumberTOOL Gets or sets the number tool. Declaration public ushort NumberTOOL { get; set; } Property Value Type Description UInt16 TopCB last CB used by wave. Declaration public ushort TopCB { get; set; } Property Value Type Description UInt16 TopOOL first OOL used by wave. Declaration public ushort TopOOL { get; set; } Property Value Type Description UInt16 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.RawWave.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.RawWave.html",
    "title": "Class RawWave | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class RawWave Represents raw waveform data. Inheritance Object RawWave Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public sealed class RawWave Properties DelayMicroseconds The delay microseconds. Declaration public uint DelayMicroseconds { get; set; } Property Value Type Description UInt32 Flags The flags. Declaration public uint Flags { get; set; } Property Value Type Description UInt32 GpioOff The gpio off. Declaration public uint GpioOff { get; set; } Property Value Type Description UInt32 GpioOn The gpio on. Declaration public uint GpioOn { get; set; } Property Value Type Description UInt32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.RawSpiData.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.RawSpiData.html",
    "title": "Class RawSpiData | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class RawSpiData Represents Raw SPI channel data. Inheritance Object RawSpiData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public class RawSpiData Properties ClockMicroseconds clock micros. Declaration public int ClockMicroseconds { get; set; } Property Value Type Description Int32 ClockOffState clock off state. Declaration public int ClockOffState { get; set; } Property Value Type Description Int32 ClockPhase clock phase. Declaration public int ClockPhase { get; set; } Property Value Type Description Int32 ClockPin GPIO for clock. Declaration public int ClockPin { get; set; } Property Value Type Description Int32 MisoPin GPIO for MISO. Declaration public int MisoPin { get; set; } Property Value Type Description Int32 MosiPin GPIO for MOSI. Declaration public int MosiPin { get; set; } Property Value Type Description Int32 SlaveSelectDelayMicroseconds delay after slave select. Declaration public int SlaveSelectDelayMicroseconds { get; set; } Property Value Type Description Int32 SlaveSelectOffState slave select off state. Declaration public int SlaveSelectOffState { get; set; } Property Value Type Description Int32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.RawCBS.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.RawCBS.html",
    "title": "Class RawCBS | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class RawCBS The Raw CBS (Linux Control Block). Inheritance Object RawCBS Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public class RawCBS Properties Destination The destination. Declaration public uint Destination { get; set; } Property Value Type Description UInt32 Info The information. Declaration public uint Info { get; set; } Property Value Type Description UInt32 Length The length. Declaration public uint Length { get; set; } Property Value Type Description UInt32 Next The next. Declaration public uint Next { get; set; } Property Value Type Description UInt32 Pad The pad. Declaration public uint[] Pad { get; set; } Property Value Type Description UInt32 [] Source The source. Declaration public uint Source { get; set; } Property Value Type Description UInt32 Stride The stride. Declaration public uint Stride { get; set; } Property Value Type Description UInt32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioSignalDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioSignalDelegate.html",
    "title": "Delegate PiGpioSignalDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioSignalDelegate Defines a callback to be executed when the OS sends a signal. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioSignalDelegate(int signalNumber); Parameters Type Name Description Int32 signalNumber The OS signal number. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate.html",
    "title": "Delegate PiGpioIsrExDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioIsrExDelegate Defines a signature for ISR callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike alerts, interrupts are generated with level changes. Make sure you hookup pull-down/pull-up resitors for interrupts to work as they depend on current flowing through the pin in order to fire consistently. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioIsrExDelegate(SystemGpio gpio, LevelChange level, uint timeMicrosecs, UIntPtr userData); Parameters Type Name Description SystemGpio gpio The gpio. LevelChange level The level. UInt32 timeMicrosecs The time microsecs. UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate.html",
    "title": "Delegate PiGpioIsrDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioIsrDelegate Defines a signature for ISR callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike alerts, interrupts are generated with level changes. Make sure you hookup pull-down/pull-up resitors for interrupts to work as they depend on current flowing through the pin in order to fire consistently. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioIsrDelegate(SystemGpio gpio, LevelChange level, uint timeMicrosecs); Parameters Type Name Description SystemGpio gpio The gpio. LevelChange level The level. UInt32 timeMicrosecs The time microsecs. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate.html",
    "title": "Delegate PiGpioGetSamplesExDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioGetSamplesExDelegate Bulk pin sampling delegate. Not used in the managed model of this library. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioGetSamplesExDelegate(GpioSample[] samples, int numSamples, UIntPtr userData); Parameters Type Name Description GpioSample [] samples The samples. Int32 numSamples The number samples. UIntPtr userData The user data. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate.html",
    "title": "Delegate PiGpioAlertDelegate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Delegate PiGpioAlertDelegate Defines a signature for alert callbacks. Conatins the pin number, a level change and a microseconds timestamp. The timestamp wraps around every ~72 minutes. Unlike Interrupts, alerts are generated by continuously sampling the value of the pin. Namespace : Unosquare.PiGpio.NativeTypes Syntax public delegate void PiGpioAlertDelegate(UserGpio userGpio, LevelChange levelChange, uint timeMicrosecs); Parameters Type Name Description UserGpio userGpio The user gpio. LevelChange levelChange The level change. UInt32 timeMicrosecs The microseconds timestamp. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.I2CMessageSegment.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.I2CMessageSegment.html",
    "title": "Class I2CMessageSegment | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class I2CMessageSegment An I2C Message Segment. Inheritance Object I2CMessageSegment Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public class I2CMessageSegment Properties Address Slave address. Declaration public ushort Address { get; set; } Property Value Type Description UInt16 Buffer pointer to msg data. Declaration public byte[] Buffer { get; set; } Property Value Type Description Byte [] Flags The flags. Declaration public ushort Flags { get; set; } Property Value Type Description UInt16 Length msg length. Declaration public ushort Length { get; set; } Property Value Type Description UInt16 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.GpioSample.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.GpioSample.html",
    "title": "Class GpioSample | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class GpioSample Represents sGPIO ample data. Inheritance Object GpioSample Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeTypes Syntax public class GpioSample Properties Level The level (0 or 1). Declaration public uint Level { get; set; } Property Value Type Description UInt32 Tick The ticks in microseconds. Wraps every ~72 minutes. Declaration public uint Tick { get; set; } Property Value Type Description UInt32 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeTypes.GpioPulse.html": {
    "href": "api/Unosquare.PiGpio.NativeTypes.GpioPulse.html",
    "title": "Struct GpioPulse | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Struct GpioPulse A pulse representing microseconds in the high position, microseconds in the low position, and a delay measure. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Unosquare.PiGpio.NativeTypes Syntax public struct GpioPulse Fields DurationMicroSecs The duration in microseconds. Declaration public uint DurationMicroSecs Field Value Type Description UInt32 GpioOff The gpio pins to turn off. Declaration public BitMask GpioOff Field Value Type Description BitMask GpioOn The GPIO pins to turn on. Declaration public BitMask GpioOn Field Value Type Description BitMask Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Uart.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Uart.html",
    "title": "Class Uart | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Uart Provides access to hardware based UART (Serial Port). Inheritance Object Uart Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Uart Methods SerClose(UIntPtr) This function closes the serial device associated with handle. Declaration public static ResultCode SerClose(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SerOpen(String, UartRate) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. SerDataAvailable(UIntPtr) This function returns the number of bytes available to be read from the device associated with handle. otherwise PI_BAD_HANDLE. Declaration public static int SerDataAvailable(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SerOpen(String, UartRate) . Returns Type Description Int32 Returns the number of bytes of data available (>=0) if OK, otherwise PI_BAD_HANDLE. SerOpen(String, UartRate) This function opens a serial device at a specified baud rate and with specified flags. The device name must start with /dev/tty or /dev/serial. The baud rate must be one of 50, 75, 110, 134, 150, 200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200, 38400, 57600, 115200, or 230400. No flags are currently defined. This parameter should be set to zero. Declaration public static UIntPtr SerOpen(string sertty, UartRate baud) Parameters Type Name Description String sertty the serial device to open. UartRate baud the baud rate in bits per second, see below. Returns Type Description UIntPtr Returns a handle (>=0) if OK, otherwise PI_NO_HANDLE, or PI_SER_OPEN_FAILED. SerRead(UIntPtr, Byte[], UInt32) This function reads up count bytes from the the serial port associated with handle and writes them to buf. If no data is ready zero is returned. Declaration public static int SerRead(UIntPtr handle, byte[] buffer, uint count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SerOpen(String, UartRate) . Byte [] buffer an array to receive the read data. UInt32 count the maximum number of bytes to read. Returns Type Description Int32 Returns the number of bytes read (>0=) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_SER_READ_NO_DATA. SerReadByte(UIntPtr) This function reads a byte from the serial port associated with handle. If no data is ready PI_SER_READ_NO_DATA is returned. Declaration public static int SerReadByte(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SerOpen(String, UartRate) . Returns Type Description Int32 Returns the read byte (>=0) if OK, otherwise PI_BAD_HANDLE, PI_SER_READ_NO_DATA, or PI_SER_READ_FAILED. SerWrite(UIntPtr, Byte[], UInt32) This function writes count bytes from buf to the the serial port associated with handle. PI_SER_WRITE_FAILED. Declaration public static ResultCode SerWrite(UIntPtr handle, byte[] buffer, uint count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SerOpen(String, UartRate) . Byte [] buffer the array of bytes to write. UInt32 count the number of bytes to write. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_SER_WRITE_FAILED. SerWriteByte(UIntPtr, UInt32) This function writes bVal to the serial port associated with handle. PI_SER_WRITE_FAILED. Declaration public static ResultCode SerWriteByte(UIntPtr handle, uint byteValue) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SerOpen(String, UartRate) . UInt32 byteValue The byte value. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_SER_WRITE_FAILED. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Threads.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Threads.html",
    "title": "Class Threads | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Threads PRovides threading and delay operations. Inheritance Object Threads Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Threads Methods GpioDelay(UInt32) Delays for at least the number of microseconds specified by micros. Delays of 100 microseconds or less use busy waits. Declaration public static uint GpioDelay(uint micros) Parameters Type Name Description UInt32 micros the number of microseconds to sleep. Returns Type Description UInt32 Returns the actual length of the delay in microseconds. GpioSetTimerFunc(TimerId, UInt32, PiGpioTimerDelegate) Registers a function to be called (a callback) every millis milliseconds. 10 timers are supported numbered 0 to 9. One function may be registered per timer. The timer may be cancelled by passing NULL as the function. Declaration public static ResultCode GpioSetTimerFunc(TimerId timer, uint periodMilliseconds, PiGpioTimerDelegate callback) Parameters Type Name Description TimerId timer 0-9. UInt32 periodMilliseconds 10-60000. PiGpioTimerDelegate callback the function to call. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_TIMER, PI_BAD_MS, or PI_TIMER_FAILED. Examples void bFunction(void) { printf(\"two seconds have elapsed\"); } // call bFunction every 2000 milliseconds gpioSetTimerFunc(0, 2000, bFunction); GpioSetTimerFuncEx(TimerId, UInt32, PiGpioTimerExDelegate, UIntPtr) Registers a function to be called (a callback) every millis milliseconds. The function is passed the userData pointer. Only one of GpioSetTimerFunc(TimerId, UInt32, PiGpioTimerDelegate) or GpioSetTimerFuncEx(TimerId, UInt32, PiGpioTimerExDelegate, UIntPtr) can be registered per timer. See GpioSetTimerFunc(TimerId, UInt32, PiGpioTimerDelegate) for further details. Declaration public static ResultCode GpioSetTimerFuncEx(TimerId timer, uint millisecondsTimeout, PiGpioTimerExDelegate callback, UIntPtr userData) Parameters Type Name Description TimerId timer 0-9. UInt32 millisecondsTimeout 10-60000. PiGpioTimerExDelegate callback the function to call. UIntPtr userData a pointer to arbitrary user data. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_TIMER, PI_BAD_MS, or PI_TIMER_FAILED. GpioSleep(TimeType, Int32, Int32) Sleeps for the number of seconds and microseconds specified by seconds and micros. If timetype is PI_TIME_ABSOLUTE the sleep ends when the number of seconds and microseconds since the epoch (1st January 1970) has elapsed. System clock changes are taken into account. If timetype is PI_TIME_RELATIVE the sleep is for the specified number of seconds and microseconds. System clock changes do not effect the sleep length. For short delays (say, 50 microseonds or less) use GpioDelay(UInt32) . Declaration public static ResultCode GpioSleep(TimeType timeType, int seconds, int micros) Parameters Type Name Description TimeType timeType 0 (relative), 1 (absolute). Int32 seconds seconds to sleep. Int32 micros microseconds to sleep. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_TIMETYPE, PI_BAD_SECONDS, or PI_BAD_MICROS. Examples gpioSleep(PI_TIME_RELATIVE, 2, 500000); // sleep for 2.5 seconds gpioSleep(PI_TIME_RELATIVE, 0, 100000); // sleep for 0.1 seconds gpioSleep(PI_TIME_RELATIVE, 60, 0); // sleep for one minute GpioStartThread(PiGpioThreadDelegate, UIntPtr) Starts a new thread of execution with callback as the main routine. The function is passed the single argument arg. The thread can be cancelled by passing the pointer to pthread_t to GpioStopThread(UIntPtr) . Declaration public static UIntPtr GpioStartThread(PiGpioThreadDelegate callback, UIntPtr userData) Parameters Type Name Description PiGpioThreadDelegate callback the main function for the new thread. UIntPtr userData a pointer to arbitrary user data. Returns Type Description UIntPtr Returns a pointer to pthread_t if OK, otherwise NULL. Examples #include <stdio.h> #include <pigpio.h> void *myfunc(void *arg) { while (1) { printf(\"%s\", arg); sleep(1); } } int main(int argc, char *argv[]) { pthread_t *p1, *p2, *p3; if (gpioInitialise() < 0) return 1; p1 = gpioStartThread(myfunc, \"thread 1\"); sleep(3); p2 = gpioStartThread(myfunc, \"thread 2\"); sleep(3); p3 = gpioStartThread(myfunc, \"thread 3\"); sleep(3); gpioStopThread(p3); sleep(3); gpioStopThread(p2); sleep(3); gpioStopThread(p1); sleep(3); gpioTerminate(); } GpioStopThread(UIntPtr) Cancels the thread pointed at by threadHandle. No value is returned. The thread to be stopped should have been started with GpioStartThread(PiGpioThreadDelegate, UIntPtr) . Declaration public static void GpioStopThread(UIntPtr handle) Parameters Type Name Description UIntPtr handle a thread pointer returned by GpioStartThread(PiGpioThreadDelegate, UIntPtr) . TimeSleep(Double) Delay execution for a given number of seconds. Declaration public static void TimeSleep(double seconds) Parameters Type Name Description Double seconds the number of seconds to sleep. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Spi.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Spi.html",
    "title": "Class Spi | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Spi Provides methods for SPI bus management. Inheritance Object Spi Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Spi Methods BbSPIClose(UserGpio) This function stops bit banging SPI on a set of GPIO opened with BbSPIOpen(UserGpio, UserGpio, UserGpio, UserGpio, UInt32, SoftSpiFlags) . Declaration public static ResultCode BbSPIClose(UserGpio csPin) Parameters Type Name Description UserGpio csPin 0-31, the CS GPIO used in a prior call to BbSPIOpen(UserGpio, UserGpio, UserGpio, UserGpio, UInt32, SoftSpiFlags) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_NOT_SPI_GPIO. BbSPIOpen(UserGpio, UserGpio, UserGpio, UserGpio, UInt32, SoftSpiFlags) This function selects a set of GPIO for bit banging SPI with a specified baud rate and mode. spiFlags consists of the least significant 22 bits. mm defines the SPI mode, defaults to 0 p is 0 if CS is active low (default) and 1 for active high. T is 1 if the least significant bit is transmitted on MOSI first, the default (0) shifts the most significant bit out first. R is 1 if the least significant bit is received on MISO first, the default (0) receives the most significant bit first. The other bits in flags should be set to zero. If more than one device is connected to the SPI bus (defined by SCLK, MOSI, and MISO) each must have its own CS. Declaration public static ResultCode BbSPIOpen(UserGpio csPin, UserGpio misoPin, UserGpio mosiPin, UserGpio clockPin, uint baudRate, SoftSpiFlags spiFlags) Parameters Type Name Description UserGpio csPin 0-31. UserGpio misoPin MISO 0-31. UserGpio mosiPin MOSI 0-31. UserGpio clockPin CLOCK 0-31. UInt32 baudRate 50-250000. SoftSpiFlags spiFlags see below. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_SPI_BAUD, or PI_GPIO_IN_USE. Remarks 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 R T 0 0 0 0 0 0 0 0 0 0 0 p m m Mode CPOL CPHA 0 0 0 1 0 1 2 1 0 3 1 1. Examples bbSPIOpen(10, MISO, MOSI, SCLK, 10000, 0); // device 1 bbSPIOpen(11, MISO, MOSI, SCLK, 20000, 3); // device 2 BbSPIXfer(UserGpio, Byte[], Byte[], UInt32) This function executes a bit banged SPI transfer. Declaration public static int BbSPIXfer(UserGpio csPin, byte[] inputBuffer, byte[] outputBuffer, uint count) Parameters Type Name Description UserGpio csPin 0-31 (as used in a prior call to BbSPIOpen(UserGpio, UserGpio, UserGpio, UserGpio, UInt32, SoftSpiFlags) ). Byte [] inputBuffer pointer to buffer to hold data to be sent. Byte [] outputBuffer pointer to buffer to hold returned data. UInt32 count size of data transfer, which is the same as the data received. Returns Type Description Int32 Returns >= 0 if OK (the number of bytes read), otherwise PI_BAD_USER_GPIO, PI_NOT_SPI_GPIO or PI_BAD_POINTER. Examples // gcc -Wall -pthread -o bbSPIx_test bbSPIx_test.c -lpigpio // sudo ./bbSPIx_test #include <stdio.h> #include \"pigpio.h\" #define CE0 5 #define CE1 6 #define MISO 13 #define MOSI 19 #define SCLK 12 int main(int argc, char *argv[]) { int i, count, set_val, read_val; unsigned char inBuf[3]; char cmd1[] = {0, 0}; char cmd2[] = {12, 0}; char cmd3[] = {1, 128, 0}; if (gpioInitialise() < 0) { fprintf(stderr, \"pigpio initialisation failed.\\n\"); return 1; } bbSPIOpen(CE0, MISO, MOSI, SCLK, 10000, 0); // MCP4251 DAC bbSPIOpen(CE1, MISO, MOSI, SCLK, 20000, 3); // MCP3008 ADC for (i=0; i<256; i++) { cmd1[1] = i; count = bbSPIXfer(CE0, cmd1, (char *)inBuf, 2); // > DAC if (count == 2) { count = bbSPIXfer(CE0, cmd2, (char *)inBuf, 2); // < DAC if (count == 2) { set_val = inBuf[1]; count = bbSPIXfer(CE1, cmd3, (char *)inBuf, 3); // < ADC if (count == 3) { read_val = ((inBuf[1]&3)<<8) | inBuf[2]; printf(\"%d %d\\n\", set_val, read_val); } } } } bbSPIClose(CE0); bbSPIClose(CE1); gpioTerminate(); return 0; } BscXfer(BscTransfer) This function provides a low-level interface to the SPI/I2C Slave peripheral. This peripheral allows the Pi to act as a slave device on an I2C or SPI bus. I can't get SPI to work properly. I tried with a control word of 0x303 and swapped MISO and MOSI. The function sets the BSC mode, writes any data in the transmit buffer to the BSC transmit FIFO, and copies any data in the BSC receive FIFO to the receive buffer. To start a transfer set control (see below) and copy the bytes to be sent (if any) to txBuf and set the byte count in txCnt. Upon return rxCnt will be set to the number of received bytes placed in rxBuf. Note that the control word sets the BSC mode. The BSC will stay in that mode until a different control word is sent. The BSC peripheral uses GPIO 18 (SDA) and 19 (SCL) in I2C mode and GPIO 18 (MOSI), 19 (SCLK), 20 (MISO), and 21 (CE) in SPI mode. You need to swap MISO/MOSI between master and slave. When a zero control word is received GPIO 18-21 will be reset to INPUT mode. The returned function value is the status of the transfer (see below). If there was an error the status will be less than zero (and will contain the error code). The most significant word of the returned status contains the number of bytes actually copied from txBuf to the BSC transmit FIFO (may be less than requested if the FIFO already contained untransmitted data). control consists of the following bits. Bits 0-13 are copied unchanged to the BSC CR register. See pages 163-165 of the Broadcom peripherals document for full details. aaaaaaa @ defines the I2C slave address (only relevant in I2C mode) IT @ invert transmit status flags HC @ enable host control TF @ enable test FIFO IR @ invert receive status flags RE @ enable receive TE @ enable transmit BK @ abort operation and clear FIFOs EC @ send control register as first I2C byte ES @ send status register as first I2C byte PL @ set SPI polarity high PH @ set SPI phase high I2 @ enable I2C mode SP @ enable SPI mode EN @ enable BSC peripheral The returned status has the following format Bits 0-15 are copied unchanged from the BSC FR register. See pages 165-166 of the Broadcom peripherals document for full details. SSSSS @ number of bytes successfully copied to transmit FIFO RRRRR @ number of bytes in receieve FIFO TTTTT @ number of bytes in transmit FIFO RB @ receive busy TE @ transmit FIFO empty RF @ receive FIFO full TF @ transmit FIFO full RE @ receive FIFO empty TB @ transmit busy The following example shows how to configure the BSC peripheral as an I2C slave with address 0x13 and send four bytes. Declaration public static int BscXfer(BscTransfer bscTransfer) Parameters Type Name Description BscTransfer bscTransfer = a structure defining the transfer. Returns Type Description Int32 The result code. 0 for success. See the ResultCode enumeration. Remarks typedef struct { uint control; // Write int rxCnt; // Read only char rxBuf[BSC_FIFO_SIZE]; // Read only int txCnt; // Write char txBuf[BSC_FIFO_SIZE]; // Write } bsc_xfer_t; 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 a a a a a a a - - IT HC TF IR RE TE BK EC ES PL PH I2 SP EN 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 S S S S S R R R R R T T T T T RB TE RF TF RE TB. Examples bsc_xfer_t xfer; xfer.control = (0x13<<16) | 0x305; memcpy(xfer.txBuf, \"ABCD\", 4); xfer.txCnt = 4; status = bscXfer(&xfer); if (status >= 0) { // process transfer } SpiClose(UIntPtr) This functions closes the SPI device identified by the handle. Declaration public static ResultCode SpiClose(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SpiOpen(SpiChannelId, Int32, SpiFlags) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. SpiOpen(SpiChannelId, Int32, SpiFlags) This function returns a handle for the SPI device on the channel. Data will be transferred at baud bits per second. The flags may be used to modify the default behaviour of 4-wire operation, mode 0, active low chip select. An auxiliary SPI device is available on all models but the A and B and may be selected by setting the A bit in the flags. The auxiliary device has 3 chip selects and a selectable word size in bits. spiFlags consists of the least significant 22 bits. mm defines the SPI mode. Warning: modes 1 and 3 do not appear to work on the auxiliary device. px is 0 if CEx is active low (default) and 1 for active high. ux is 0 if the CEx GPIO is reserved for SPI (default) and 1 otherwise. A is 0 for the standard SPI device, 1 for the auxiliary SPI. W is 0 if the device is not 3-wire, 1 if the device is 3-wire. Standard SPI device only. nnnn defines the number of bytes (0-15) to write before switching the MOSI line to MISO to read data. This field is ignored if W is not set. Standard SPI device only. T is 1 if the least significant bit is transmitted on MOSI first, the default (0) shifts the most significant bit out first. Auxiliary SPI device only. R is 1 if the least significant bit is received on MISO first, the default (0) receives the most significant bit first. Auxiliary SPI device only. bbbbbb defines the word size in bits (0-32). The default (0) sets 8 bits per word. Auxiliary SPI device only. The SpiRead(UIntPtr, Int32) , SpiWrite(UIntPtr, Byte[]) , and SpiXfer(UIntPtr, Byte[]) functions transfer data packed into 1, 2, or 4 bytes according to the word size in bits. For bits 1-8 there will be one byte per word. For bits 9-16 there will be two bytes per word. For bits 17-32 there will be four bytes per word. Multi-byte transfers are made in least significant byte first order. E.g. to transfer 32 11-bit words buf should contain 64 bytes and count should be 64. E.g. to transfer the 14 bit value 0x1ABC send the bytes 0xBC followed by 0x1A. The other bits in flags should be set to zero. Declaration public static UIntPtr SpiOpen(SpiChannelId spiChannel, int baudRate, SpiFlags spiFlags) Parameters Type Name Description SpiChannelId spiChannel 0-1 (0-2 for the auxiliary SPI device). Int32 baudRate 32K-125M (values above 30M are unlikely to work). SpiFlags spiFlags see below. Returns Type Description UIntPtr Returns a handle (>=0) if OK, otherwise PI_BAD_SPI_CHANNEL, PI_BAD_SPI_SPEED, PI_BAD_FLAGS, PI_NO_AUX_SPI, or PI_SPI_OPEN_FAILED. Remarks 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 b b b b b b R T n n n n W A u2 u1 u0 p2 p1 p0 m m Mode POL PHA 0 0 0 1 0 1 2 1 0 3 1 1. SpiRead(UIntPtr, Int32) This function reads count bytes of data from the SPI device associated with the handle. PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED. Declaration public static byte[] SpiRead(UIntPtr handle, int count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SpiOpen(SpiChannelId, Int32, SpiFlags) . Int32 count The max number of bytes to read. Returns Type Description Byte [] Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED. SpiWrite(UIntPtr, Byte[]) This function writes count bytes of data from buf to the SPI device associated with the handle. PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED. Declaration public static int SpiWrite(UIntPtr handle, byte[] buffer) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SpiOpen(SpiChannelId, Int32, SpiFlags) . Byte [] buffer the data bytes to write. Returns Type Description Int32 Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED. SpiXfer(UIntPtr, Byte[]) This function transfers count bytes of data from txBuf to the SPI device associated with the handle. Simultaneously count bytes of data are read from the device and placed in rxBuf. PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED. Declaration public static byte[] SpiXfer(UIntPtr handle, byte[] transmitBuffer) Parameters Type Name Description UIntPtr handle =0, as returned by a call to SpiOpen(SpiChannelId, Int32, SpiFlags) . Byte [] transmitBuffer the data bytes to write. Returns Type Description Byte [] Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Setup.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Setup.html",
    "title": "Class Setup | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Setup Library setup and configuration methods. Inheritance Object Setup Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Setup Methods GpioCfgBufferSize(UInt32) Configures pigpio to buffer cfgMillis milliseconds of GPIO samples. This function is only effective if called before GpioInitialise() . The default setting is 120 milliseconds. The intention is to allow for bursts of data and protection against other processes hogging cpu time. I haven't seen a process locked out for more than 100 milliseconds. Making the buffer bigger uses a LOT of memory at the more frequent sampling rates as shown in the following table in MBs. Declaration public static ResultCode GpioCfgBufferSize(uint milliSecs) Parameters Type Name Description UInt32 milliSecs 100-10000. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. Remarks buffer milliseconds 120 250 500 1sec 2sec 4sec 8sec 1 16 31 55 107 --- --- --- 2 10 18 31 55 107 --- --- sample 4 8 12 18 31 55 107 --- rate 5 8 10 14 24 45 87 --- (us) 8 6 8 12 18 31 55 107 10 6 8 10 14 24 45 87. GpioCfgClock(UInt32, CpuPeripheral) Configures pigpio to use a particular sample rate timed by a specified peripheral. This function is only effective if called before GpioInitialise() . The timings are provided by the specified peripheral (PWM or PCM). The default setting is 5 microseconds using the PCM peripheral. The approximate CPU percentage used for each sample rate is: A sample rate of 5 microseconds seeems to be the sweet spot. Declaration public static ResultCode GpioCfgClock(uint microSecs, CpuPeripheral peripheral) Parameters Type Name Description UInt32 microSecs 1, 2, 4, 5, 8, 10. CpuPeripheral peripheral 0 (PWM), 1 (PCM). Returns Type Description ResultCode The result code. Remarks sample cpu rate % 1 25 2 16 4 11 5 10 8 15 10 14. GpioCfgDmaChannel(DmaChannel) Configures pigpio to use the specified DMA channel. This function is only effective if called before GpioInitialise() . The default setting is to use channel 14. Declaration [Obsolete] public static ResultCode GpioCfgDmaChannel(DmaChannel dmaChannel) Parameters Type Name Description DmaChannel dmaChannel The DMA channel. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. Remarks DMAchannel: 0-14. GpioCfgDmaChannels(DmaChannel, DmaChannel) Configures pigpio to use the specified DMA channels. This function is only effective if called before GpioInitialise() . The default setting is to use channel 14 for the primary channel and channel 6 for the secondary channel. The secondary channel is only used for the transmission of waves. If possible use one of channels 0 to 6 for the secondary channel (a full channel). A full channel only requires one DMA control block regardless of the length of a pulse delay. Channels 7 to 14 (lite channels) require one DMA control block for each 16383 microseconds of delay. I.e. a 10 second pulse delay requires one control block on a full channel and 611 control blocks on a lite channel. Declaration public static ResultCode GpioCfgDmaChannels(DmaChannel primaryChannel, DmaChannel secondaryChannel) Parameters Type Name Description DmaChannel primaryChannel Channel 1: 0-14. DmaChannel secondaryChannel Channel 2: 0-14. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgGetInternals() This function returns the current library internal configuration settings. Declaration public static ConfigFlags GpioCfgGetInternals() Returns Type Description ConfigFlags The result code. 0 for success. See the ResultCode enumeration. GpioCfgInterfaces(InterfaceFlags) Configures pigpio support of the fifo and socket interfaces. This function is only effective if called before GpioInitialise() . The default setting (0) is that both interfaces are enabled. Or in PI_DISABLE_FIFO_IF to disable the pipe interface. Or in PI_DISABLE_SOCK_IF to disable the socket interface. Or in PI_LOCALHOST_SOCK_IF to disable remote socket access (this means that the socket interface is only usable from the local Pi). Declaration public static ResultCode GpioCfgInterfaces(InterfaceFlags interfaceFlags) Parameters Type Name Description InterfaceFlags interfaceFlags 0-7. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgInternals(UInt32, UInt32) Used to tune internal settings. Declaration [Obsolete] public static ResultCode GpioCfgInternals(uint key, uint value) Parameters Type Name Description UInt32 key Key: see source code. UInt32 value Value: see source code. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgMemAlloc(AllocationMode) Selects the method of DMA memory allocation. This function is only effective if called before GpioInitialise() . There are two methods of DMA memory allocation. The original method uses the /proc/self/pagemap file to allocate bus memory. The new method uses the mailbox property interface to allocate bus memory. Auto will use the mailbox method unless a larger than default buffer size is requested with GpioCfgBufferSize(UInt32) . Declaration public static ResultCode GpioCfgMemAlloc(AllocationMode allocationMode) Parameters Type Name Description AllocationMode allocationMode 0-2. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgNetAddr(UInt32[]) Sets the network addresses which are allowed to talk over the socket interface. This function is only effective if called before GpioInitialise() . Declaration public static ResultCode GpioCfgNetAddr(uint[] socketAddresses) Parameters Type Name Description UInt32 [] socketAddresses an array of permitted network addresses. An empty array means ALL. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgPermissions(UInt64) Configures pigpio to restrict GPIO updates via the socket or pipe interfaces to the GPIO specified by the mask. Programs directly calling the pigpio library (i.e. linked with -lpigpio are not affected). A GPIO update is a write to a GPIO or a GPIO mode change or any function which would force such an action. This function is only effective if called before GpioInitialise() . The default setting depends upon the Pi model. The user GPIO are added to the mask. If the board revision is not recognised then GPIO 2-27 are allowed. Unknown board @ PI_DEFAULT_UPDATE_MASK_UNKNOWN @ 0x0FFFFFFC Type 1 board @ PI_DEFAULT_UPDATE_MASK_B1 @ 0x03E6CF93 Type 2 board @ PI_DEFAULT_UPDATE_MASK_A_B2 @ 0xFBC6CF9C Type 3 board @ PI_DEFAULT_UPDATE_MASK_R3 @ 0x0FFFFFFC. Declaration public static ResultCode GpioCfgPermissions(ulong updateMask) Parameters Type Name Description UInt64 updateMask bit (1<<n) is set for each GPIO n which may be updated. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgSetInternals(ConfigFlags) This function sets the current library internal configuration settings. Declaration public static ResultCode GpioCfgSetInternals(ConfigFlags configFlags) Parameters Type Name Description ConfigFlags configFlags see source code. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioCfgSocketPort(UInt32) Configures pigpio to use the specified socket port. This function is only effective if called before GpioInitialise() . The default setting is to use port 8888. Declaration public static ResultCode GpioCfgSocketPort(uint port) Parameters Type Name Description UInt32 port 1024-32000. Returns Type Description ResultCode The result code. 0 for success. See the ResultCode enumeration. GpioInitialise() Initialises the library. gpioInitialise must be called before using the other library functions with the following exceptions:. Declaration public static ResultCode GpioInitialise() Returns Type Description ResultCode Returns the pigpio version number if OK, otherwise PI_INIT_FAILED. Remarks GpioCfg methods. GpioVersion() GpioHardwareRevision() . Examples if (gpioInitialise() < 0) { // pigpio initialisation failed. } else { // pigpio initialised okay. } GpioTerminate() Terminates the library. Returns nothing. Call before program exit. This function resets the used DMA channels, releases memory, and terminates any running threads. Declaration public static void GpioTerminate() Examples gpioTerminate(); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.IO.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.IO.html",
    "title": "Class IO | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class IO Defines fundamental IO methods for the GPIO Pins. The bulk of the managed pin functionality is supplied by these methods. Inheritance Object IO Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class IO Methods GpioGetMode(SystemGpio) Gest the current mode for the given GPIO. Declaration public static PinMode GpioGetMode(SystemGpio gpio) Parameters Type Name Description SystemGpio gpio The gpio. Returns Type Description PinMode The port mode. GpioGetPad(GpioPadId) This function returns the pad drive strength in mA. Pad @ GPIO 0 @ 0-27 1 @ 28-45 2 @ 46-53. Declaration public static GpioPadStrength GpioGetPad(GpioPadId pad) Parameters Type Name Description GpioPadId pad 0-2, the pad to get. Returns Type Description GpioPadStrength Returns the pad drive strength if OK, otherwise PI_BAD_PAD. Examples strength = gpioGetPad(1); // get pad 1 strength GpioGlitchFilter(UserGpio, UInt32) Sets a glitch filter on a GPIO. Level changes on the GPIO are not reported unless the level has been stable for at least steadyMicroseconds microseconds. The level is then reported. Level changes of less than steadyMicroseconds microseconds are ignored. This filter affects the GPIO samples returned to callbacks set up with GpioSetAlertFunc(UserGpio, PiGpioAlertDelegate) , GpioSetAlertFuncEx(UserGpio, PiGpioAlertExDelegate, UIntPtr) , GpioSetGetSamplesFunc(PiGpioGetSamplesDelegate, BitMask) , and GpioSetGetSamplesFuncEx(PiGpioGetSamplesExDelegate, BitMask, UIntPtr) . It does not affect interrupts set up with GpioSetIsrFunc(SystemGpio, EdgeDetection, Int32, PiGpioIsrDelegate) , GpioSetIsrFuncEx(SystemGpio, EdgeDetection, Int32, PiGpioIsrExDelegate, UIntPtr) , or levels read by GpioRead(SystemGpio) , GpioReadBits00To31() , or GpioReadBits32To53() . Each (stable) edge will be timestamped steadyMicroseconds microseconds after it was first detected. Declaration public static ResultCode GpioGlitchFilter(UserGpio userGpio, uint steadyMicroseconds) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 steadyMicroseconds 0-300000. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_BAD_FILTER. GpioNoiseFilter(UserGpio, UInt32, UInt32) Sets a noise filter on a GPIO. Level changes on the GPIO are ignored until a level which has been stable for steadyMicroseconds microseconds is detected. Level changes on the GPIO are then reported for activeMicroseconds microseconds after which the process repeats. This filter affects the GPIO samples returned to callbacks set up with GpioSetAlertFunc(UserGpio, PiGpioAlertDelegate) , GpioSetAlertFuncEx(UserGpio, PiGpioAlertExDelegate, UIntPtr) , GpioSetGetSamplesFunc(PiGpioGetSamplesDelegate, BitMask) , and GpioSetGetSamplesFuncEx(PiGpioGetSamplesExDelegate, BitMask, UIntPtr) . It does not affect interrupts set up with GpioSetIsrFunc(SystemGpio, EdgeDetection, Int32, PiGpioIsrDelegate) , GpioSetIsrFuncEx(SystemGpio, EdgeDetection, Int32, PiGpioIsrExDelegate, UIntPtr) , or levels read by GpioRead(SystemGpio) , GpioReadBits00To31() , or GpioReadBits32To53() . Level changes before and after the active period may be reported. Your software must be designed to cope with such reports. Declaration public static ResultCode GpioNoiseFilter(UserGpio userGpio, uint steadyMicroseconds, uint activeMicroseconds) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 steadyMicroseconds 0-300000. UInt32 activeMicroseconds 0-1000000. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_BAD_FILTER. GpioRead(SystemGpio) Reads the value of the GPIO. Declaration public static bool GpioRead(SystemGpio gpio) Parameters Type Name Description SystemGpio gpio The gpio. Returns Type Description Boolean The digital value. GpioReadBits00To31() Returns the current level of GPIO 0-31. Declaration public static uint GpioReadBits00To31() Returns Type Description UInt32 The current level of GPIO 0-31. GpioReadBits32To53() Returns the current level of GPIO 32-53. Declaration public static uint GpioReadBits32To53() Returns Type Description UInt32 The current level of GPIO 32-53. GpioSetAlertFunc(UserGpio, PiGpioAlertDelegate) Registers a function to be called (a callback) when the specified GPIO changes state. One callback may be registered per GPIO. The callback is passed the GPIO, the new level, and the tick. The alert may be cancelled by passing NULL as the function. The GPIO are sampled at a rate set when the library is started. If a value isn't specifically set the default of 5 us is used. The number of samples per second is given in the following table. Level changes shorter than the sample rate may be missed. The thread which calls the alert functions is triggered nominally 1000 times per second. The active alert functions will be called once per level change since the last time the thread was activated. i.e. The active alert functions will get all level changes but there will be a latency. The tick value is the time stamp of the sample in microseconds, see GpioTick() for more details. Declaration public static ResultCode GpioSetAlertFunc(UserGpio userGpio, PiGpioAlertDelegate callback) Parameters Type Name Description UserGpio userGpio 0-31. PiGpioAlertDelegate callback the callback function. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO. Remarks Parameter Value Meaning GPIO 0-31 The GPIO which has changed state level 0-2 0 = change to low (a falling edge) 1 = change to high (a rising edge) 2 = no level change (a watchdog timeout) tick 32 bit The number of microseconds since boot WARNING: this wraps around from 4294967295 to 0 roughly every 72 minutes samples per sec 1 1,000,000 2 500,000 sample 4 250,000 rate 5 200,000 (us) 8 125,000 10 100,000. Examples void aFunction(int gpio, int level, uint tick) { printf(\"GPIO %d became %d at %d\", gpio, level, tick); } // call aFunction whenever GPIO 4 changes state gpioSetAlertFunc(4, aFunction); GpioSetAlertFuncEx(UserGpio, PiGpioAlertExDelegate, UIntPtr) Registers a function to be called (a callback) when the specified GPIO changes state. One callback may be registered per GPIO. The callback is passed the GPIO, the new level, the tick, and the userData pointer. See GpioSetAlertFunc(UserGpio, PiGpioAlertDelegate) for further details. Only one of GpioSetAlertFunc(UserGpio, PiGpioAlertDelegate) or GpioSetAlertFuncEx(UserGpio, PiGpioAlertExDelegate, UIntPtr) can be registered per GPIO. Declaration public static ResultCode GpioSetAlertFuncEx(UserGpio userGpio, PiGpioAlertExDelegate callback, UIntPtr userData) Parameters Type Name Description UserGpio userGpio 0-31. PiGpioAlertExDelegate callback the callback function. UIntPtr userData pointer to arbitrary user data. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO. Remarks Parameter Value Meaning GPIO 0-31 The GPIO which has changed state level 0-2 0 = change to low (a falling edge) 1 = change to high (a rising edge) 2 = no level change (a watchdog timeout) tick 32 bit The number of microseconds since boot WARNING: this wraps around from 4294967295 to 0 roughly every 72 minutes userData pointer Pointer to an arbitrary object. GpioSetGetSamplesFunc(PiGpioGetSamplesDelegate, BitMask) Registers a function to be called (a callback) every millisecond with the latest GPIO samples. The function is passed a pointer to the samples (an array of GpioSample ), and the number of samples. Only one function can be registered. The callback may be cancelled by passing NULL as the function. The samples returned will be the union of bits, plus any active alerts, plus any active notifications. e.g. if there are alerts for GPIO 7, 8, and 9, notifications for GPIO 8, 10, 23, 24, and bits is (1<<23)|(1<<17) then samples for GPIO 7, 8, 9, 10, 17, 23, and 24 will be reported. Declaration public static ResultCode GpioSetGetSamplesFunc(PiGpioGetSamplesDelegate callback, BitMask bits) Parameters Type Name Description PiGpioGetSamplesDelegate callback the function to call. BitMask bits the GPIO of interest. Returns Type Description ResultCode Returns 0 if OK. GpioSetGetSamplesFuncEx(PiGpioGetSamplesExDelegate, BitMask, UIntPtr) Registers a function to be called (a callback) every millisecond with the latest GPIO samples. The function is passed a pointer to the samples (an array of GpioSample ), the number of samples, and the userData pointer. Only one of GpioSetGetSamplesFunc(PiGpioGetSamplesDelegate, BitMask) or GpioSetGetSamplesFuncEx(PiGpioGetSamplesExDelegate, BitMask, UIntPtr) can be registered. See GpioSetGetSamplesFunc(PiGpioGetSamplesDelegate, BitMask) for further details. Declaration public static ResultCode GpioSetGetSamplesFuncEx(PiGpioGetSamplesExDelegate callback, BitMask bits, UIntPtr userData) Parameters Type Name Description PiGpioGetSamplesExDelegate callback the function to call. BitMask bits the GPIO of interest. UIntPtr userData a pointer to arbitrary user data. Returns Type Description ResultCode Returns 0 if OK. GpioSetIsrFunc(SystemGpio, EdgeDetection, Int32, PiGpioIsrDelegate) Registers a function to be called (a callback) whenever the specified GPIO interrupt occurs. One function may be registered per GPIO. The function is passed the GPIO, the current level, and the current tick. The level will be PI_TIMEOUT if the optional interrupt timeout expires. The underlying Linux sysfs GPIO interface is used to provide the interrupt services. The first time the function is called, with a non-NULL f, the GPIO is exported, set to be an input, and set to interrupt on the given edge and timeout. Subsequent calls, with a non-NULL f, can vary one or more of the edge, timeout, or function. The ISR may be cancelled by passing a NULL f, in which case the GPIO is unexported. The tick is that read at the time the process was informed of the interrupt. This will be a variable number of microseconds after the interrupt occurred. Typically the latency will be of the order of 50 microseconds. The latency is not guaranteed and will vary with system load. The level is that read at the time the process was informed of the interrupt, or PI_TIMEOUT if the optional interrupt timeout expired. It may not be the same as the expected edge as interrupts happening in rapid succession may be missed by the kernel (i.e. this mechanism can not be used to capture several interrupts only a few microseconds apart). Declaration public static ResultCode GpioSetIsrFunc(SystemGpio gpio, EdgeDetection edge, int timeout, PiGpioIsrDelegate callback) Parameters Type Name Description SystemGpio gpio 0-53. EdgeDetection edge RISING_EDGE, FALLING_EDGE, or EITHER_EDGE. Int32 timeout interrupt timeout in milliseconds (<=0 to cancel). PiGpioIsrDelegate callback the callback function. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO, PI_BAD_EDGE, or PI_BAD_ISR_INIT. Remarks Parameter Value Meaning GPIO 0-53 The GPIO which has changed state level 0-2 0 = change to low (a falling edge) 1 = change to high (a rising edge) 2 = no level change (interrupt timeout) tick 32 bit The number of microseconds since boot WARNING: this wraps around from 4294967295 to 0 roughly every 72 minutes. GpioSetIsrFuncEx(SystemGpio, EdgeDetection, Int32, PiGpioIsrExDelegate, UIntPtr) Registers a function to be called (a callback) whenever the specified GPIO interrupt occurs. The function is passed the GPIO, the current level, the current tick, and the userData pointer. Only one of GpioSetIsrFunc(SystemGpio, EdgeDetection, Int32, PiGpioIsrDelegate) or GpioSetIsrFuncEx(SystemGpio, EdgeDetection, Int32, PiGpioIsrExDelegate, UIntPtr) can be registered per GPIO. See GpioSetIsrFunc(SystemGpio, EdgeDetection, Int32, PiGpioIsrDelegate) for further details. Declaration public static ResultCode GpioSetIsrFuncEx(SystemGpio gpio, EdgeDetection edge, int timeout, PiGpioIsrExDelegate callback, UIntPtr userData) Parameters Type Name Description SystemGpio gpio 0-53. EdgeDetection edge RISING_EDGE, FALLING_EDGE, or EITHER_EDGE. Int32 timeout interrupt timeout in milliseconds (<=0 to cancel). PiGpioIsrExDelegate callback the callback function. UIntPtr userData pointer to arbitrary user data. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO, PI_BAD_EDGE, or PI_BAD_ISR_INIT. Remarks Parameter Value Meaning GPIO 0-53 The GPIO which has changed state level 0-2 0 = change to low (a falling edge) 1 = change to high (a rising edge) 2 = no level change (interrupt timeout) tick 32 bit The number of microseconds since boot WARNING: this wraps around from 4294967295 to 0 roughly every 72 minutes userData pointer Pointer to an arbitrary object. GpioSetMode(SystemGpio, PinMode) Sets the GPIO mode, typically input or output. Arduino style: pinMode. See [[ http://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf ]] page 102 for an overview of the modes. Declaration public static ResultCode GpioSetMode(SystemGpio gpio, PinMode mode) Parameters Type Name Description SystemGpio gpio 0-53. PinMode mode 0-7. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_MODE. Examples gpioSetMode(17, PI_INPUT); // Set GPIO17 as input. gpioSetMode(18, PI_OUTPUT); // Set GPIO18 as output. gpioSetMode(22,PI_ALT0); // Set GPIO22 to alternative mode 0. GpioSetPad(GpioPadId, GpioPadStrength) This function sets the pad drive strength in mA. Pad @ GPIO 0 @ 0-27 1 @ 28-45 2 @ 46-53. Declaration public static ResultCode GpioSetPad(GpioPadId pad, GpioPadStrength padStrength) Parameters Type Name Description GpioPadId pad 0-2, the pad to set. GpioPadStrength padStrength 1-16 mA. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_PAD, or PI_BAD_STRENGTH. Examples gpioSetPad(0, 16); // set pad 0 strength to 16 mA GpioSetPullUpDown(SystemGpio, GpioPullMode) Sets or clears resistor pull ups or downs on the GPIO. Declaration public static ResultCode GpioSetPullUpDown(SystemGpio gpio, GpioPullMode pullMode) Parameters Type Name Description SystemGpio gpio 0-53. GpioPullMode pullMode 0-2. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_PUD. Examples gpioSetPullUpDown(17, PI_PUD_UP); // Sets a pull-up. gpioSetPullUpDown(18, PI_PUD_DOWN); // Sets a pull-down. gpioSetPullUpDown(23, PI_PUD_OFF); // Clear any pull-ups/downs. GpioSetWatchdog(UserGpio, UInt32) Sets a watchdog for a GPIO. The watchdog is nominally in milliseconds. One watchdog may be registered per GPIO. The watchdog may be cancelled by setting timeout to 0. Until cancelled a timeout will be reported every timeout milliseconds after the last GPIO activity. In particular: 1) any registered alert function for the GPIO will be called with the level set to PI_TIMEOUT. 2) any notification for the GPIO will have a report written to the fifo with the flags set to indicate a watchdog timeout. Declaration public static ResultCode GpioSetWatchdog(UserGpio userGpio, uint timeoutMilliseconds) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 timeoutMilliseconds 0-60000. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_WDOG_TIMEOUT. Examples void aFunction(int gpio, int level, uint tick) { printf(\"GPIO %d became %d at %d\", gpio, level, tick); } // call aFunction whenever GPIO 4 changes state gpioSetAlertFunc(4, aFunction); // or approximately every 5 millis gpioSetWatchdog(4, 5); GpioTrigger(UserGpio, UInt32, Boolean) This function sends a trigger pulse to a GPIO. The GPIO is set to level for pulseLen microseconds and then reset to not level. or PI_BAD_PULSELEN. Declaration public static ResultCode GpioTrigger(UserGpio userGpio, uint pulseLength, bool value) Parameters Type Name Description UserGpio userGpio 0-31. UInt32 pulseLength 1-100. Boolean value 0,1. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_LEVEL, or PI_BAD_PULSELEN. GpioWrite(SystemGpio, Boolean) Sets the GPIO level, on or off. If PWM or servo pulses are active on the GPIO they are switched off. Arduino style: digitalWrite. Declaration public static ResultCode GpioWrite(SystemGpio gpio, bool value) Parameters Type Name Description SystemGpio gpio 0-53. Boolean value 0-1. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_LEVEL. Examples gpioWrite(24, 1); // Set GPIO24 high. GpioWriteBits00To31Clear(BitMask) Clears GPIO 0-31 if the corresponding bit in bits is set. Declaration public static ResultCode GpioWriteBits00To31Clear(BitMask bits) Parameters Type Name Description BitMask bits a bit mask of GPIO to clear. Returns Type Description ResultCode Returns 0 if OK. Examples // To clear (set to 0) GPIO 4, 7, and 15 gpioWrite_Bits_0_31_Clear( (1<<4) | (1<<7) | (1<<15) ); GpioWriteBits00To31Set(BitMask) Sets GPIO 0-31 if the corresponding bit in bits is set. Declaration public static ResultCode GpioWriteBits00To31Set(BitMask bits) Parameters Type Name Description BitMask bits a bit mask of GPIO to set. Returns Type Description ResultCode Returns 0 if OK. GpioWriteBits32To53Clear(BitMask) Clears GPIO 32-53 if the corresponding bit (0-31) in bits is set. Declaration public static ResultCode GpioWriteBits32To53Clear(BitMask bits) Parameters Type Name Description BitMask bits a bit mask of GPIO to clear. Returns Type Description ResultCode Returns 0 if OK. GpioWriteBits32To53Set(BitMask) Sets GPIO 32-53 if the corresponding bit (0-21) in bits is set. Declaration public static ResultCode GpioWriteBits32To53Set(BitMask bits) Parameters Type Name Description BitMask bits a bit mask of GPIO to set. Returns Type Description ResultCode Returns 0 if OK. Examples // To set (set to 1) GPIO 32, 40, and 53 gpioWrite_Bits_32_53_Set((1<<(32-32)) | (1<<(40-32)) | (1<<(53-32))); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.I2c.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.I2c.html",
    "title": "Class I2c | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class I2c Provides Methods for both, hardware based I2C and Bit-bang (Software) I2C bus communication. Inheritance Object I2c Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class I2c Methods BbI2CClose(UserGpio) This function stops bit banging I2C on a pair of GPIO previously opened with BbI2COpen(UserGpio, UserGpio, UInt32) . Declaration public static ResultCode BbI2CClose(UserGpio sdaPin) Parameters Type Name Description UserGpio sdaPin 0-31, the SDA GPIO used in a prior call to BbI2COpen(UserGpio, UserGpio, UInt32) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_NOT_I2C_GPIO. BbI2COpen(UserGpio, UserGpio, UInt32) This function selects a pair of GPIO for bit banging I2C at a specified baud rate. Bit banging I2C allows for certain operations which are not possible with the standard I2C driver. o baud rates as low as 50 o repeated starts o clock stretching o I2C on any pair of spare GPIO NOTE: The GPIO used for SDA and SCL must have pull-ups to 3V3 connected. As a guide the hardware pull-ups on pins 3 and 5 are 1k8 in value. Declaration public static ResultCode BbI2COpen(UserGpio sdaPin, UserGpio sclPin, uint baudRate) Parameters Type Name Description UserGpio sdaPin SDA 0-31. UserGpio sclPin SCL 0-31. UInt32 baudRate 50-500000. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_I2C_BAUD, or PI_GPIO_IN_USE. BbI2CZip(UserGpio, Byte[], UInt32, Byte[], UInt32) This function executes a sequence of bit banged I2C operations. The operations to be performed are specified by the contents of inBuf which contains the concatenated command codes and associated data. The following command codes are supported: Name @ Cmd & Data @ Meaning End @ 0 @ No more commands Escape @ 1 @ Next P is two bytes Start @ 2 @ Start condition Stop @ 3 @ Stop condition Address @ 4 P @ Set I2C address to P Flags @ 5 lsb msb @ Set I2C flags to lsb + (msb << 8) Read @ 6 P @ Read P bytes of data Write @ 7 P ... @ Write P bytes of data The address, read, and write commands take a parameter P. Normally P is one byte (0-255). If the command is preceded by the Escape command then P is two bytes (0-65535, least significant byte first). The address and flags default to 0. The address and flags maintain their previous value until updated. No flags are currently defined. The returned I2C data is stored in consecutive locations of outBuf. Declaration public static int BbI2CZip(UserGpio sdaPin, byte[] inputBuffer, uint inputLength, byte[] outputBuffer, uint outputLength) Parameters Type Name Description UserGpio sdaPin 0-31 (as used in a prior call to BbI2COpen(UserGpio, UserGpio, UInt32) ). Byte [] inputBuffer pointer to the concatenated I2C commands, see below. UInt32 inputLength size of command buffer. Byte [] outputBuffer pointer to buffer to hold returned data. UInt32 outputLength size of output buffer. Returns Type Description Int32 Returns >= 0 if OK (the number of bytes read), otherwise PI_BAD_USER_GPIO, PI_NOT_I2C_GPIO, PI_BAD_POINTER, PI_BAD_I2C_CMD, PI_BAD_I2C_RLEN, PI_BAD_I2C_WLEN, PI_I2C_READ_FAILED, or PI_I2C_WRITE_FAILED. Examples Set address 0x53 start, write 0x32, (re)start, read 6 bytes, stop Set address 0x1E start, write 0x03, (re)start, read 6 bytes, stop Set address 0x68 start, write 0x1B, (re)start, read 8 bytes, stop End 0x04 0x53 0x02 0x07 0x01 0x32 0x02 0x06 0x06 0x03 0x04 0x1E 0x02 0x07 0x01 0x03 0x02 0x06 0x06 0x03 0x04 0x68 0x02 0x07 0x01 0x1B 0x02 0x06 0x08 0x03 0x00 I2cBlockProcessCall(UIntPtr, Byte, Byte[]) This writes data bytes to the specified register of the device associated with handle and reads a device specified number of bytes of data in return. The SMBus 2.0 documentation states that a minimum of 1 byte may be sent and a minimum of 1 byte may be received. The total number of bytes sent/received must be 32 or less. Block write-block read. SMBus 2.0 5.5.8. Declaration public static int I2cBlockProcessCall(UIntPtr handle, byte register, byte[] buffer) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to write/read. Byte [] buffer an array with the data to send and to receive the read data. Returns Type Description Int32 Returns the number of bytes read (>=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Wr [A] i2cReg [A] count [A] buf0 [A] ... bufn [A] S Addr Rd [A] [Count] A [buf0] A ... [bufn] A P. I2cClose(UIntPtr) This closes the I2C device associated with the handle. Declaration public static ResultCode I2cClose(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. I2cOpen(UInt32, UInt32) This returns a handle for the device at the address on the I2C bus. No flags are currently defined. This parameter should be set to zero. Physically buses 0 and 1 are available on the Pi. Higher numbered buses will be available if a kernel supported bus multiplexor is being used. For the SMBus commands the low level transactions are shown at the end of the function description. The following abbreviations are used. Declaration public static UIntPtr I2cOpen(uint i2cBus, uint i2cAddress) Parameters Type Name Description UInt32 i2cBus =0. UInt32 i2cAddress 0-0x7F. Returns Type Description UIntPtr Returns a handle (>=0) if OK, otherwise PI_BAD_I2C_BUS, PI_BAD_I2C_ADDR, PI_BAD_FLAGS, PI_NO_HANDLE, or PI_I2C_OPEN_FAILED. Remarks S (1 bit) : Start bit P (1 bit) : Stop bit Rd/Wr (1 bit) : Read/Write bit. Rd equals 1, Wr equals 0. A, NA (1 bit) : Accept and not accept bit. Addr (7 bits): I2C 7 bit address. i2cReg (8 bits): Command byte, a byte which often selects a register. Data (8 bits): A data byte. Count (8 bits): A byte defining the length of a block operation. [..]: Data sent by the device. I2cProcessCall(UIntPtr, Byte, UInt16) This writes 16 bits of data to the specified register of the device associated with handle and reads 16 bits of data in return. Process call. SMBus 2.0 5.5.6. Declaration public static ushort I2cProcessCall(UIntPtr handle, byte register, ushort word) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to write/read. UInt16 word 0-0xFFFF, the value to write. Returns Type Description UInt16 Returns the word read (>=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Wr [A] i2cReg [A] wValLow [A] wValHigh [A] S Addr Rd [A] [DataLow] A [DataHigh] NA P. I2cReadBlockData(UIntPtr, Byte) This reads a block of up to 32 bytes from the specified register of the device associated with handle. The amount of returned data is set by the device. Block read. SMBus 2.0 5.5.7. Declaration public static byte[] I2cReadBlockData(UIntPtr handle, byte register) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to read. Returns Type Description Byte [] Returns the number of bytes read (>=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Wr [A] i2cReg [A] S Addr Rd [A] [Count] A [buf0] A [buf1] A ... A [bufn] NA P. I2cReadByte(UIntPtr) This reads a single byte from the device associated with handle. Receive byte. SMBus 2.0 5.5.3. Declaration public static byte I2cReadByte(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Returns Type Description Byte Returns the byte read (>=0) if OK, otherwise PI_BAD_HANDLE, or PI_I2C_READ_FAILED. Remarks S Addr Rd [A] [Data] NA P. I2cReadByteData(UIntPtr, Byte) This reads a single byte from the specified register of the device associated with handle. Read byte. SMBus 2.0 5.5.5. Declaration public static byte I2cReadByteData(UIntPtr handle, byte register) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to read. Returns Type Description Byte Returns the byte read (>=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Wr [A] i2cReg [A] S Addr Rd [A] [Data] NA P. I2cReadDevice(UIntPtr, Byte[]) This reads count bytes from the raw device into buf. Declaration public static int I2cReadDevice(UIntPtr handle, byte[] buffer) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte [] buffer an array to receive the read data bytes. Returns Type Description Int32 Returns count (>0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P. I2cReadDevice(UIntPtr, Int32) This reads count bytes from the raw device into buf. Declaration public static byte[] I2cReadDevice(UIntPtr handle, int count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Int32 count Read upt to this many bytes. Returns Type Description Byte [] Returns count (>0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P. I2cReadI2cBlockData(UIntPtr, Byte, Int32) This reads count bytes from the specified register of the device associated with handle . The count may be 1-32. Declaration public static byte[] I2cReadI2cBlockData(UIntPtr handle, byte register, int count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to read. Int32 count The amount of bytes to read from 1 to 32. Returns Type Description Byte [] Returns the number of bytes read (>0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Wr [A] i2cReg [A] S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P. I2cReadWordData(UIntPtr, Byte) This reads a single 16 bit word from the specified register of the device associated with handle. Read word. SMBus 2.0 5.5.5. Declaration public static ushort I2cReadWordData(UIntPtr handle, byte register) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to read. Returns Type Description UInt16 Returns the word read (>=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED. Remarks S Addr Wr [A] i2cReg [A] S Addr Rd [A] [DataLow] A [DataHigh] NA P. I2cSegments(UIntPtr, I2CMessageSegment[], UInt32) This function executes multiple I2C segments in one transaction by calling the I2C_RDWR ioctl. Declaration public static int I2cSegments(UIntPtr handle, I2CMessageSegment[] segments, uint numSegs) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . I2CMessageSegment [] segments an array of I2C segments. UInt32 numSegs 0, the number of I2C segments. Returns Type Description Int32 Returns the number of segments if OK, otherwise PI_BAD_I2C_SEG. I2cSwitchCombined(Int32) This sets the I2C (i2c-bcm2708) module \"use combined transactions\" parameter on or off. NOTE: when the flag is on a write followed by a read to the same slave address will use a repeated start (rather than a stop/start). Declaration public static void I2cSwitchCombined(int setting) Parameters Type Name Description Int32 setting 0 to set the parameter off, non-zero to set it on. I2cWriteBlockData(UIntPtr, Byte, Byte[]) This writes up to 32 bytes to the specified register of the device associated with handle. Block write. SMBus 2.0 5.5.7. Declaration public static ResultCode I2cWriteBlockData(UIntPtr handle, byte register, byte[] buffer) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to write. Byte [] buffer an array with the data to send. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr Wr [A] i2cReg [A] count [A] buf0 [A] buf1 [A] ... [A] bufn [A] P. I2cWriteByte(UIntPtr, Byte) This sends a single byte to the device associated with handle. Send byte. SMBus 2.0 5.5.2. Declaration public static ResultCode I2cWriteByte(UIntPtr handle, byte value) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte value 0-0xFF, the value to write. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr Wr [A] bVal [A] P. I2cWriteByteData(UIntPtr, Byte, Byte) This writes a single byte to the specified register of the device associated with handle. Write byte. SMBus 2.0 5.5.4. Declaration public static ResultCode I2cWriteByteData(UIntPtr handle, byte register, byte value) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to write. Byte value 0-0xFF, the value to write. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr Wr [A] i2cReg [A] bVal [A] P. I2cWriteDevice(UIntPtr, Byte[]) This writes count bytes from buf to the raw device. Declaration public static ResultCode I2cWriteDevice(UIntPtr handle, byte[] buffer) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte [] buffer an array containing the data bytes to write. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr Wr [A] buf0 [A] buf1 [A] ... [A] bufn [A] P. I2cWriteI2cBlockData(UIntPtr, Byte, Byte[], Int32) This writes 1 to 32 bytes to the specified register of the device associated with handle. Declaration public static ResultCode I2cWriteI2cBlockData(UIntPtr handle, byte register, byte[] buffer, int count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to write. Byte [] buffer the data to write. Int32 count The amount of bytes to write (from 1 to 32). Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr Wr [A] i2cReg [A] buf0 [A] buf1 [A] ... [A] bufn [A] P. I2cWriteQuick(UIntPtr, I2cQuickMode) This sends a single bit (in the Rd/Wr bit) to the device associated with handle. Quick command. SMBus 2.0 5.5.1. Declaration public static ResultCode I2cWriteQuick(UIntPtr handle, I2cQuickMode bit) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . I2cQuickMode bit 0-1, the value to write. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr bit [A] P. I2cWriteWordData(UIntPtr, Byte, UInt16) This writes a single 16 bit word to the specified register of the device associated with handle. Write word. SMBus 2.0 5.5.4. Declaration public static ResultCode I2cWriteWordData(UIntPtr handle, byte register, ushort word) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte register 0-255, the register to write. UInt16 word 0-0xFFFF, the value to write. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED. Remarks S Addr Wr [A] i2cReg [A] wValLow [A] wValHigh [A] P. I2cZip(UIntPtr, Byte[], UInt32, Byte[], UInt32) This function executes a sequence of I2C operations. The operations to be performed are specified by the contents of inBuf which contains the concatenated command codes and associated data. The following command codes are supported: Name @ Cmd & Data @ Meaning End @ 0 @ No more commands Escape @ 1 @ Next P is two bytes On @ 2 @ Switch combined flag on Off @ 3 @ Switch combined flag off Address @ 4 P @ Set I2C address to P Flags @ 5 lsb msb @ Set I2C flags to lsb + (msb << 8) Read @ 6 P @ Read P bytes of data Write @ 7 P ... @ Write P bytes of data The address, read, and write commands take a parameter P. Normally P is one byte (0-255). If the command is preceded by the Escape command then P is two bytes (0-65535, least significant byte first). The address defaults to that associated with the handle. The flags default to 0. The address and flags maintain their previous value until updated. The returned I2C data is stored in consecutive locations of outBuf. Declaration public static int I2cZip(UIntPtr handle, byte[] inputBuffer, uint inputLength, byte[] outputBuffer, uint outLength) Parameters Type Name Description UIntPtr handle =0, as returned by a call to I2cOpen(UInt32, UInt32) . Byte [] inputBuffer pointer to the concatenated I2C commands, see below. UInt32 inputLength size of command buffer. Byte [] outputBuffer pointer to buffer to hold returned data. UInt32 outLength size of output buffer. Returns Type Description Int32 Returns >= 0 if OK (the number of bytes read), otherwise PI_BAD_HANDLE, PI_BAD_POINTER, PI_BAD_I2C_CMD, PI_BAD_I2C_RLEN. PI_BAD_I2C_WLEN, or PI_BAD_I2C_SEG. Examples Set address 0x53, write 0x32, read 6 bytes Set address 0x1E, write 0x03, read 6 bytes Set address 0x68, write 0x1B, read 8 bytes End 0x04 0x53 0x07 0x01 0x32 0x06 0x06 0x04 0x1E 0x07 0x01 0x03 0x06 0x06 0x04 0x68 0x07 0x01 0x1B 0x06 0x08 0x00 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Files.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Files.html",
    "title": "Class Files | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Files A file may only be opened if permission is granted by an entry in /opt/pigpio/access. This is intended to allow remote access to files in a more or less controlled manner. Each entry in /opt/pigpio/access takes the form of a file path which may contain wildcards followed by a single letter permission. The permission may be R for read, W for write, U for read/write, and N for no access. Where more than one entry matches a file the most specific rule applies. If no entry matches a file then access is denied. Suppose /opt/pigpio/access contains the following entries Files may be written in directory dir_1 with the exception of file.txt. Files may be read in directory dir_2. Files may be read and written in directory dir_3. If a directory allows read, write, or read/write access then files may be created in that directory. In an attempt to prevent risky permissions the following paths are ignored in /opt/pigpio/access. Inheritance Object Files Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Files Methods FileClose(UIntPtr) This function closes the file associated with handle. Declaration public static ResultCode FileClose(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by a call to FileOpen(String, FileModeFlags) . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. Examples fileClose(h); FileList(String) Retrieves a list of files matching the given pattern. See Unosquare.PiGpio.NativeMethods.Files.FileListUnmanaged(System.String,System.Byte[],System.UInt32) . Declaration public static string[] FileList(string pathPattern) Parameters Type Name Description String pathPattern The path pattern. Returns Type Description String [] A list of matching files. FileOpen(String, FileModeFlags) A wrapper function for Unosquare.PiGpio.NativeMethods.Files.FileOpenUnmanaged(System.String,System.UInt32) . Declaration public static UIntPtr FileOpen(string filePath, FileModeFlags mode) Parameters Type Name Description String filePath The file path. FileModeFlags mode The mode. Returns Type Description UIntPtr A file handle. Exceptions Type Condition IOException When the file fails to open. FileRead(UIntPtr, Byte[], UInt32) This function reads up to count bytes from the the file associated with handle and writes them to buf. Declaration public static int FileRead(UIntPtr handle, byte[] buffer, uint count) Parameters Type Name Description UIntPtr handle =0, as returned by a call to FileOpen(String, FileModeFlags) . Byte [] buffer an array to receive the read data. UInt32 count the maximum number of bytes to read. Returns Type Description Int32 Returns the number of bytes read (>=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, PI_FILE_NOT_ROPEN, or PI_BAD_FILE_WRITE. Examples if (fileRead(h, buf, sizeof(buf)) > 0) { // process read data } FileRead(UIntPtr, Int32) Reads from a file handle up to count bytes. Declaration public static byte[] FileRead(UIntPtr handle, int count) Parameters Type Name Description UIntPtr handle The handle. Int32 count The count. Returns Type Description Byte [] The array of bytes read. FileSeek(UIntPtr, Int32, SeekMode) Seeks within a file. Declaration public static int FileSeek(UIntPtr handle, int seekOffset, SeekMode seekFrom) Parameters Type Name Description UIntPtr handle The handle. Int32 seekOffset The seek offset. SeekMode seekFrom The seek from. Returns Type Description Int32 The new byte position within the file. FileWrite(UIntPtr, Byte[]) Writes the given buffer to a file handle. Declaration public static ResultCode FileWrite(UIntPtr handle, byte[] buffer) Parameters Type Name Description UIntPtr handle The handle. Byte [] buffer The buffer. Returns Type Description ResultCode The Result Code. FileWrite(UIntPtr, Byte[], Int32) Writes the given buffer to a file handle. Declaration public static ResultCode FileWrite(UIntPtr handle, byte[] buffer, int length) Parameters Type Name Description UIntPtr handle The handle. Byte [] buffer The buffer. Int32 length The length. Returns Type Description ResultCode The Result Code. Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeMethods.Events.html": {
    "href": "api/Unosquare.PiGpio.NativeMethods.Events.html",
    "title": "Class Events | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Class Events Provides event notification warapper APIs for the pigpio library. These methods represent an internal event system that is unused in the managed model of this library. Inheritance Object Events Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Unosquare.PiGpio.NativeMethods Syntax public static class Events Methods EventMonitor(UIntPtr, BitMask) This function selects the events to be reported on a previously opened handle. A report is sent each time an event is triggered providing the corresponding bit in bits is set. See GpioNotifyBegin(UIntPtr, BitMask) for the notification format. Declaration public static ResultCode EventMonitor(UIntPtr handle, BitMask bitMask) Parameters Type Name Description UIntPtr handle =0, as returned by GpioNotifyOpen() . BitMask bitMask a bit mask indicating the events of interest. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. Examples // Start reporting events 3, 6, and 7. // bit 76543210 // (0xC8 = 0b11001000) eventMonitor(h, 0xC8); EventSetFunc(UInt32, PiGpioEventDelegate) Registers a function to be called (a callback) when the specified event occurs. One function may be registered per event. The function is passed the event, and the tick. The callback may be cancelled by passing NULL as the function. Declaration public static ResultCode EventSetFunc(uint eventId, PiGpioEventDelegate callback) Parameters Type Name Description UInt32 eventId 0-31. PiGpioEventDelegate callback the callback function. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_EVENT_ID. EventSetFuncEx(UInt32, PiGpioEventExDelegate, UIntPtr) Registers a function to be called (a callback) when the specified event occurs. One function may be registered per event. The function is passed the event, the tick, and the ueserdata pointer. The callback may be cancelled by passing NULL as the function. Only one of EventSetFunc(UInt32, PiGpioEventDelegate) EventSetFuncEx(UInt32, PiGpioEventExDelegate, UIntPtr) can be registered per event. Declaration public static ResultCode EventSetFuncEx(uint eventId, PiGpioEventExDelegate callback, UIntPtr userData) Parameters Type Name Description UInt32 eventId 0-31. PiGpioEventExDelegate callback the callback function. UIntPtr userData pointer to arbitrary user data. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_EVENT_ID. EventTrigger(UInt32) This function signals the occurrence of an event. An event is a signal used to inform one or more consumers to start an action. Each consumer which has registered an interest in the event (e.g. by calling EventSetFunc(UInt32, PiGpioEventDelegate) ) will be informed by a callback. One event, PI_EVENT_BSC (31) is predefined. This event is auto generated on BSC slave activity. The meaning of other events is arbitrary. Note that other than its id and its tick there is no data associated with an event. Declaration public static ResultCode EventTrigger(uint eventId) Parameters Type Name Description UInt32 eventId 0-31, the event. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_EVENT_ID. GpioNotifyBegin(UIntPtr, BitMask) This function starts notifications on a previously opened handle. The notification sends state changes for each GPIO whose corresponding bit in bits is set. Each notification occupies 12 bytes in the fifo and has the following structure. seqno: starts at 0 each time the handle is opened and then increments by one for each report. flags: three flags are defined, PI_NTFY_FLAGS_WDOG, PI_NTFY_FLAGS_ALIVE, and PI_NTFY_FLAGS_EVENT. If bit 5 is set (PI_NTFY_FLAGS_WDOG) then bits 0-4 of the flags indicate a GPIO which has had a watchdog timeout. If bit 6 is set (PI_NTFY_FLAGS_ALIVE) this indicates a keep alive signal on the pipe/socket and is sent once a minute in the absence of other notification activity. If bit 7 is set (PI_NTFY_FLAGS_EVENT) then bits 0-4 of the flags indicate an event which has been triggered. tick: the number of microseconds since system boot. It wraps around after 1h12m. level: indicates the level of each GPIO. If bit 1<<x is set then GPIO x is high. Declaration public static ResultCode GpioNotifyBegin(UIntPtr handle, BitMask bitMask) Parameters Type Name Description UIntPtr handle =0, as returned by GpioNotifyOpen() . BitMask bitMask a bit mask indicating the GPIO of interest. Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. Remarks typedef struct { uint16_t seqno; uint16_t flags; uint tick; uint level; } gpioReport_t;. Examples // Start notifications for GPIO 1, 4, 6, 7, 10. // 1 // 0 76 4 1 // (1234 = 0x04D2 = 0b0000010011010010) gpioNotifyBegin(h, 1234); GpioNotifyClose(UIntPtr) This function stops notifications on a previously opened handle and releases the handle for reuse. Declaration public static ResultCode GpioNotifyClose(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by GpioNotifyOpen() . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. Examples gpioNotifyClose(h); GpioNotifyOpen() This function requests a free notification handle. A notification is a method for being notified of GPIO state changes via a pipe or socket. Pipe notifications for handle x will be available at the pipe named /dev/pigpiox (where x is the handle number). E.g. if the function returns 15 then the notifications must be read from /dev/pigpio15. Socket notifications are returned to the socket which requested the handle. Declaration public static UIntPtr GpioNotifyOpen() Returns Type Description UIntPtr Returns a handle greater than or equal to zero if OK, otherwise PI_NO_HANDLE. Examples h = gpioNotifyOpen(); if (h >= 0) { sprintf(str, \"/dev/pigpio%d\", h); fd = open(str, O_RDONLY); if (fd >= 0) { // Okay. } else { // Error. } } else { // Error. } GpioNotifyOpenWithSize(Int32) This function requests a free notification handle. It differs from GpioNotifyOpen() in that the pipe size may be specified, whereas GpioNotifyOpen() uses the default pipe size. See GpioNotifyOpen() for further details. Declaration public static UIntPtr GpioNotifyOpenWithSize(int bufferSize) Parameters Type Name Description Int32 bufferSize The pipe size of the the buffer. Returns Type Description UIntPtr The result code. 0 for success. See the ResultCode enumeration. GpioNotifyPause(UIntPtr) This function pauses notifications on a previously opened handle. Notifications for the handle are suspended until GpioNotifyBegin(UIntPtr, BitMask) is called again. Declaration public static ResultCode GpioNotifyPause(UIntPtr handle) Parameters Type Name Description UIntPtr handle =0, as returned by GpioNotifyOpen() . Returns Type Description ResultCode Returns 0 if OK, otherwise PI_BAD_HANDLE. Examples gpioNotifyPause(h); Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.UartRate.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.UartRate.html",
    "title": "Enum UartRate | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum UartRate Defines the valid UART rates. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum UartRate Fields Name Description BaudRate110 The baud rate 110 bps BaudRate115200 The baud rate 115200 bps BaudRate1200 The baud rate 1200 bps BaudRate134 The baud rate 134 bps BaudRate150 The baud rate 150 bps BaudRate1800 The baud rate 1800 bps BaudRate19200 The baud rate 19200 bps BaudRate200 The baud rate 200 bps BaudRate230400 The baud rate 230400 bps BaudRate2400 The baud rate 2400 bps BaudRate300 The baud rate 300 bps BaudRate38400 The baud rate 38400 bps BaudRate4800 The baud rate 4800 bps BaudRate50 The baud rate 50 bps BaudRate57600 The baud rate 57600 bps BaudRate600 The baud rate 600 bps BaudRate75 The baud rate 75 bps BaudRate9600 The baud rate 9600 bps Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.TimeType.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.TimeType.html",
    "title": "Enum TimeType | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum TimeType Time Type enumeration. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum TimeType Fields Name Description Absolute The absolute time type Relative The relative time type Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  },
  "api/Unosquare.PiGpio.NativeEnums.TimerId.html": {
    "href": "api/Unosquare.PiGpio.NativeEnums.TimerId.html",
    "title": "Enum TimerId | Unosquare Raspbery Pi - libpigpio for .net",
    "keywords": "Enum TimerId The Pi can register up to 10 hardware timers. This lists all 10 hardware timers from 0 to 9. Namespace : Unosquare.PiGpio.NativeEnums Syntax public enum TimerId Fields Name Description Timer00 The GPIO Hardware Timer 00 Timer01 The GPIO Hardware Timer 01 Timer02 The GPIO Hardware Timer 02 Timer03 The GPIO Hardware Timer 03 Timer04 The GPIO Hardware Timer 04 Timer05 The GPIO Hardware Timer 05 Timer06 The GPIO Hardware Timer 06 Timer07 The GPIO Hardware Timer 07 Timer08 The GPIO Hardware Timer 08 Timer09 The GPIO Hardware Timer 09 Comments /** * RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS. * LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/ /* var disqus_config = function () { this.page.url = PAGE_URL; // Replace PAGE_URL with your page's canonical URL variable this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable }; */ (function() { // DON'T EDIT BELOW THIS LINE var d = document, s = d.createElement('script'); s.src = 'https://unolabs.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s); })(); Please enable JavaScript to view the comments powered by Disqus."
  }
}